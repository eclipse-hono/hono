<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AMQP throughput test" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <stringProp name="TestPlan.comments">Tests throughput at the AMQP message level. Can be used to determine the maximum number of telemetry messages or events that can be processed by a Qpid Dispatch Router and/or Artemis broker.</stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <collectionProp name="TestPlan.thread_groups"/>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="honoTenant" elementType="Argument">
            <stringProp name="Argument.name">honoTenant</stringProp>
            <stringProp name="Argument.value">${__P(tenant,DEFAULT_TENANT)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="honoDevices" elementType="Argument">
            <stringProp name="Argument.name">honoDevices</stringProp>
            <stringProp name="Argument.value">${__P(deviceCount, 3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="honoSolutionConsumers" elementType="Argument">
            <stringProp name="Argument.name">honoSolutionConsumers</stringProp>
            <stringProp name="Argument.value">${__P(consumerCount, 2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="honoTestRuntime" elementType="Argument">
            <stringProp name="Argument.name">honoTestRuntime</stringProp>
            <stringProp name="Argument.value">${__P(testRuntime, 60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="honoTestRuntimeReceiverLag" elementType="Argument">
            <stringProp name="Argument.name">honoTestRuntimeReceiverLag</stringProp>
            <stringProp name="Argument.value">${__P(consumerLag, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="honoTrustStorePath" elementType="Argument">
            <stringProp name="Argument.name">honoTrustStorePath</stringProp>
            <stringProp name="Argument.value">${__P(defaultTrustStorePath,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Receiver Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${honoSolutionConsumers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1495533707000</longProp>
        <longProp name="ThreadGroup.end_time">1495533707000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Run n seconds" enabled="true">
          <stringProp name="RunTime.seconds">${__intSum(${honoTestRuntime},${honoTestRuntimeReceiverLag})}</stringProp>
        </RunTime>
        <hashTree>
          <org.eclipse.hono.jmeter.HonoReceiverSampler guiclass="org.eclipse.hono.jmeter.ui.HonoReceiverSamplerUI" testclass="org.eclipse.hono.jmeter.HonoReceiverSampler" testname="Hono Receiver" enabled="true">
            <stringProp name="host">${__P(router.host, 127.0.0.1)}</stringProp>
            <stringProp name="port">${__P(router.port, 15671)}</stringProp>
            <stringProp name="user">${__P(receiver.user, consumer@HONO)}</stringProp>
            <stringProp name="pwd">${__P(receiver.password, verysecret)}</stringProp>
            <stringProp name="address">telemetry/DEFAULT_TENANT</stringProp>
            <stringProp name="container">receiver</stringProp>
            <stringProp name="trustStorePath">${__P(receiver.trustStorePath, ${honoTrustStorePath})}</stringProp>
            <stringProp name="tenant">${honoTenant}</stringProp>
            <boolProp name="useSenderTime">true</boolProp>
            <stringProp name="endpoint">telemetry</stringProp>
            <stringProp name="prefetch">50</stringProp>
            <stringProp name="reconnectAttempts">3</stringProp>
            <boolProp name="senderTimeInPayload">false</boolProp>
            <stringProp name="senderTimeVariableName">timeStamp</stringProp>
            <stringProp name="TestPlan.comments">Consumes Telemetry messages or Events from a service implementing the northbound operations of the Telemetry and/or Event APIs.</stringProp>
          </org.eclipse.hono.jmeter.HonoReceiverSampler>
          <hashTree/>
          <Summariser guiclass="SummariserGui" testclass="Summariser" testname="received" enabled="true"/>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="TestPlan.comments">Wait for incoming messages from Hono/AMQP-Network</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sender Thread Group" enabled="true">
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.num_threads">${honoDevices}</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <longProp name="ThreadGroup.start_time">1495623196000</longProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <longProp name="ThreadGroup.end_time">1495623196000</longProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Run n seconds" enabled="true">
          <stringProp name="RunTime.seconds">${honoTestRuntime}</stringProp>
        </RunTime>
        <hashTree>
          <org.eclipse.hono.jmeter.HonoSenderSampler guiclass="org.eclipse.hono.jmeter.ui.HonoSenderSamplerUI" testclass="org.eclipse.hono.jmeter.HonoSenderSampler" testname="Hono Sender" enabled="true">
            <stringProp name="host">${__P(messaging.host, 127.0.0.1)}</stringProp>
            <stringProp name="port">${__P(messaging.port, 5671)}</stringProp>
            <stringProp name="user">${__P(sender.user, hono-client@HONO)}</stringProp>
            <stringProp name="pwd">${__P(sender.password, secret)}</stringProp>
            <stringProp name="address">telemetry/DEFAULT_TENANT</stringProp>
            <stringProp name="container">sender</stringProp>
            <stringProp name="trustStorePath">${__P(sender.trustStorePath, ${honoTrustStorePath})}</stringProp>
            <stringProp name="deviceId">device_${__threadNum}</stringProp>
            <stringProp name="tenant">${honoTenant}</stringProp>
            <boolProp name="setSenderTime">true</boolProp>
            <stringProp name="contentType">text/plain</stringProp>
            <stringProp name="data">This is an arbitrary Hono test message.</stringProp>
            <stringProp name="waitForReceivers">${honoSolutionConsumers}</stringProp>
            <stringProp name="waitForReceiversTimeout">5000</stringProp>
            <boolProp name="waitForCredits">true</boolProp>
            <stringProp name="endpoint">telemetry</stringProp>
            <stringProp name="TestPlan.comments">Sends a Telemetry message or Event to a service implementing the southbound operations of the Telemetry and/or Event APIs.</stringProp>
            <boolProp name="waitForDeliveryResult">true</boolProp>
            <stringProp name="sendTimeout">1000</stringProp>
            <stringProp name="messageCountPerSamplerRun">1</stringProp>
          </org.eclipse.hono.jmeter.HonoSenderSampler>
          <hashTree/>
          <Summariser guiclass="SummariserGui" testclass="Summariser" testname="sent" enabled="true"/>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">5</stringProp>
            <stringProp name="TestPlan.comments">Only needed if you do not wait for credits - adjust this together with the threads to not overload Hono</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
