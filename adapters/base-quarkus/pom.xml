<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2020 Contributors to the Eclipse Foundation

    See the NOTICE file(s) distributed with this work for additional
    information regarding copyright ownership.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License 2.0 which is available at
    http://www.eclipse.org/legal/epl-2.0

    SPDX-License-Identifier: EPL-2.0
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>hono-adapters</artifactId>
    <groupId>org.eclipse.hono</groupId>
    <version>1.6.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>hono-adapter-base-quarkus</artifactId>
  <packaging>pom</packaging>

  <name>Hono Protocol Adapter Base (Quarkus)</name>
  <description>Defines common dependencies for Quarkus-based protocol adapter implementations</description>

  <properties>
    <hono.skip-image-build>true</hono.skip-image-build>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-bom</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.jboss.logmanager</groupId>
        <artifactId>jboss-logmanager-embedded</artifactId>
        <version>1.0.6</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-service-base-quarkus</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-config-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jboss.logmanager</groupId>
      <artifactId>log4j2-jboss-logmanager</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jboss.logging</groupId>
      <artifactId>commons-logging-jboss-logging</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-service-base</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-autoconfigure</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-actuator-autoconfigure</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context-support</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>client-device-connection-infinispan</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-autoconfigure</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
      <scope>compile</scope>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <systemProperties>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
          </systemProperties>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jboss.jandex</groupId>
        <artifactId>jandex-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>set-system-properties</goal>
            </goals>
            <configuration>
              <properties>
                <property>
                  <name>hono.metrics</name>
                  <value>${hono.metrics}</value>
                </property>
                <property>
                  <name>hono.tracing</name>
                  <value>${hono.tracing}</value>
                </property>
              </properties>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>build-docker-image</id>
      <activation>
        <property>
          <name>docker.host</name>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-epoll</artifactId>
          <classifier>linux-x86_64</classifier>
          <scope>runtime</scope>
        </dependency>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-kqueue</artifactId>
          <classifier>osx-x86_64</classifier>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <skip>${hono.skip-image-build}</skip>
              <images>
                <image>
                  <name>${docker.repository}/%a:%v</name>
                  <build>
                    <env>
                      <JAVA_MAJOR_VERSION>${maven.compiler.release}</JAVA_MAJOR_VERSION>
                      <JAVA_APP_NAME>${project.artifactId}</JAVA_APP_NAME>
                      <JAVA_LIB_DIR>/opt/hono/lib/*:/opt/hono/extensions/*</JAVA_LIB_DIR>
                      <JAVA_OPTIONS>-Dvertx.cacheDirBase=/tmp -Djava.util.logging.manager=org.jboss.logmanager.LogManager</JAVA_OPTIONS>
                      <JAVA_APP_JAR>${project.artifactId}-${project.version}-runner.jar</JAVA_APP_JAR>
                    </env>
                    <entryPoint>
                      <arg>/opt/hono/run-java.sh</arg>
                    </entryPoint>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/docker-extra/run-java</directory>
                            <outputDirectory>opt/hono</outputDirectory>
                            <includes>
                              <include>run-java.sh</include>
                            </includes>
                            <fileMode>755</fileMode>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/lib</directory>
                            <outputDirectory>opt/hono/lib</outputDirectory>
                            <includes>
                              <include>*.jar</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}</directory>
                            <outputDirectory>opt/hono</outputDirectory>
                            <includes>
                              <include>${project.artifactId}-${project.version}-runner.jar</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                </image>
              </images>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>build-native-image</id>
      <properties>
        <quarkus.native.additional-build-args>--initialize-at-run-time=io.netty.internal.tcnative.SSL, -H:ResourceConfigurationFiles=resources-config.json, -H:ReflectionConfigurationFiles=reflection-config.json</quarkus.native.additional-build-args>
        <!-- build native image inside of a container, doesn't require GraalVM SDK to be installed locally -->
        <quarkus.native.container-build>true</quarkus.native.container-build>
        <quarkus.package.type>native</quarkus.package.type>
        <!--  include all JSSE related classes -->
        <quarkus.native.enable-all-security-services>true</quarkus.native.enable-all-security-services>
      </properties>

      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-tcnative</artifactId>
        </dependency>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-tcnative-boringssl-static</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-caffeine</artifactId>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <skip>${hono.skip-image-build}</skip>
              <images>
                <image>
                  <name>${docker.repository}/%a-native:%v</name>
                  <build>
                    <maintainer>The Eclipse Hono project</maintainer>
                    <labels>
                      <project>Eclipse Hono</project>
                    </labels>
                    <tags>
                      <tag>latest</tag>
                      <tag>${docker.image.additional.tag}</tag>
                    </tags>
                    <imagePullPolicy>Always</imagePullPolicy>
                    <from>registry.access.redhat.com/ubi8/ubi-minimal:8.1</from>
                    <workdir>/opt/hono</workdir>
                    <entryPoint>
                      <arg>/opt/hono/${project.artifactId}-${project.version}-runner</arg>
                    </entryPoint>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}</directory>
                            <outputDirectory>opt/hono</outputDirectory>
                            <includes>
                              <include>${project.artifactId}-${project.version}-runner</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                </image>
              </images>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>docker-push-image</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-push-image</id>
                <phase>install</phase>
                <goals>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>metrics-prometheus</id>
      <activation>
        <property>
          <name>metrics-prometheus</name>
        </property>
      </activation>
      <properties>
        <hono.metrics>prometheus</hono.metrics>
      </properties>
    </profile>

    <profile>
      <id>jaeger</id>
      <activation>
        <property>
          <name>jaeger</name>
        </property>
      </activation>
      <properties>
        <hono.tracing>jaeger</hono.tracing>
      </properties>
      <dependencies>
        <dependency>
          <groupId>io.jaegertracing</groupId>
          <artifactId>jaeger-client</artifactId>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
</project>
