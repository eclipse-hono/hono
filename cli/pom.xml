<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2022 Contributors to the Eclipse Foundation
   
    See the NOTICE file(s) distributed with this work for additional
    information regarding copyright ownership.
   
    This program and the accompanying materials are made available under the
    terms of the Eclipse Public Li2cense 2.0 which is available at
    http://www.eclipse.org/legal/epl-2.0
   
    SPDX-License-Identifier: EPL-2.0
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.eclipse.hono</groupId>
    <artifactId>hono-bom</artifactId>
    <version>2.0.0-SNAPSHOT</version>
    <relativePath>../bom</relativePath>
  </parent>

  <artifactId>hono-cli</artifactId>
  <name>Hono command-line interface</name>
  <url>https://www.eclipse.org/hono</url>

  <description>Quarkus based Hono Command line Interface</description>

  <properties>
    <quarkus.package.type>uber-jar</quarkus.package.type>
    <quarkus.package.runner-suffix>-exec</quarkus.package.runner-suffix>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-legal</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-picocli</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-config-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-kafka-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-common</artifactId>
      <exclusions>
        <exclusion>
          <groupId>io.vertx</groupId>
          <artifactId>vertx-health-check</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-device-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-kafka-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-application-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-application-kafka</artifactId>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli-shell-jline3</artifactId>
      <version>4.6.3</version>
    </dependency>
    <dependency>
      <groupId>org.fusesource.jansi</groupId>
      <artifactId>jansi</artifactId>
      <version>1.18</version>
    </dependency>

    <!-- testing -->
    <dependency>
      <groupId>com.google.truth</groupId>
      <artifactId>truth</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>core-test-utils</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>


  <build>
    <resources>
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <!-- Copy legal documents from "legal" module to "target/classes" folder so that we make sure to include 
          legal docs in all modules. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <!-- Execution and configuration for copying certificates from related module to "target/classes" folder 
              so that we can include them in the image. -->
            <id>copy_demo_certs</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <includeArtifactIds>
                hono-demo-certs
              </includeArtifactIds>
              <outputDirectory>${project.build.directory}/config</outputDirectory>
              <includes>
                *.pem,
                *.jks,
                *.p12
              </includes>
              <useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
              <stripClassifier>true</stripClassifier>
              <stripVersion>true</stripVersion>
              <excludeTransitive>true</excludeTransitive>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <extensions>true</extensions>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
              <goal>generate-code</goal>
              <goal>generate-code-tests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>

    <profile>
      <id>build-native-image</id>
      <properties>
        <!-- build native image inside of a container, doesn't require GraalVM SDK to be installed locally -->
        <quarkus.native.remote-container-build>true</quarkus.native.remote-container-build>
        <quarkus.native.builder-image>${native.builder-image.name}</quarkus.native.builder-image>
        <quarkus.package.type>native</quarkus.package.type>
        <!--  include all JSSE related classes -->
        <quarkus.native.enable-all-security-services>true</quarkus.native.enable-all-security-services>
        <!-- allow incomplete class path in order to not require (optional) compression codec dependencies of Netty -->
        <!-- use Base64 encoder/decoder that is compatible with vert.x 3 -->
        <quarkus.native.additional-build-args>
          --initialize-at-run-time=io.netty.internal.tcnative.SSL\,org.apache.kafka.common.security.authenticator.SaslClientAuthenticator,
          --allow-incomplete-classpath,
          -Dvertx.json.base64=legacy
        </quarkus.native.additional-build-args>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
                <image>
                  <name>${docker.repository}/%a-native:%v</name>
                  <build>
                    <maintainer>The Eclipse Hono project</maintainer>
                    <labels>
                      <project>Eclipse Hono</project>
                    </labels>
                    <tags>
                      <tag>${docker.image.additional.tag}</tag>
                    </tags>
                    <imagePullPolicy>Always</imagePullPolicy>
                    <from>${native.image.name}</from>
                    <workdir>/opt/hono</workdir>
                    <entryPoint>
                      <arg>/opt/hono/${project.artifactId}-${project.version}-runner</arg>
                      <arg>-Djava.util.logging.manager=org.jboss.logmanager.LogManager</arg>
                    </entryPoint>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}</directory>
                            <outputDirectory>opt/hono</outputDirectory>
                            <includes>
                              <include>${project.artifactId}-${project.version}-runner</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                </image>
              </images>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
