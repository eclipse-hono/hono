hono:
  app:
    maxInstances: 1
  auth:
    host: "${hono.auth.host}"
    port: 5671
    name: "command-router"
    trustStorePath: "/opt/hono/config/certs/trusted-certs.pem"
    validation:
      certPath: "/opt/hono/config/certs/auth-server-cert.pem"
  commandRouter:
    amqp:
      insecurePortEnabled: true
      insecurePortBindAddress: "0.0.0.0"
    cache:
      remote:
        serverList: "${hono.infinispan.host}"
        authServerName: "${hono.infinispan.host}"
        authRealm: "ApplicationRealm"
        authUsername: "${hono.infinispan.username}"
        authPassword: "${hono.infinispan.password}"
        saslMechanism: "SCRAM-SHA-512"
        socketTimeout: 5000
        connectTimeout: 5000
  registration:
    name: 'Hono Command Router'
    host: "${hono.registration.host}"
    port: 5672
    username: "command-router@HONO"
    password: "cmd-router-secret"
    linkEstablishmentTimeout: ${link.establishment.timeout}
    flowLatency: ${flow.latency}
    requestTimeout: ${request.timeout}
  tenant:
    name: 'Hono Command Router'
    host: "${hono.registration.host}"
    port: 5672
    username: "command-router@HONO"
    password: "cmd-router-secret"
    linkEstablishmentTimeout: ${link.establishment.timeout}
    flowLatency: ${flow.latency}
    requestTimeout: ${request.timeout}
  command:
    name: 'Hono Command Router'
    host: "${hono.amqp-network.host}"
    port: 5673
    amqpHostname: "hono-internal"
    keyPath: "/opt/hono/config/certs/command-router-key.pem"
    certPath: "/opt/hono/config/certs/command-router-cert.pem"
    trustStorePath: "/opt/hono/config/certs/trusted-certs.pem"
    linkEstablishmentTimeout: ${link.establishment.timeout}
    flowLatency: ${flow.latency}
    requestTimeout: ${request.timeout}
  kafka:
    commonClientConfig:
      bootstrap.servers: "${hono.kafka.bootstrap.servers}"

quarkus:
  application:
    name: "${hono.commandrouter.host}"
  opentelemetry:
    tracer:
      exporter:
        otlp:
          endpoint: "${otel-collector.endpoint}"
  log:
    console:
      color: true
    level: INFO
    min-level: TRACE
    category:
      "io.quarkus.vertx.core.runtime":
        level: DEBUG
  vertx:
    max-event-loop-execute-time: ${max.event-loop.execute-time}
