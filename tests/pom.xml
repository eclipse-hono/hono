<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2016, 2021 Contributors to the Eclipse Foundation
   
    See the NOTICE file(s) distributed with this work for additional
    information regarding copyright ownership.
   
    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License 2.0 which is available at
    http://www.eclipse.org/legal/epl-2.0
   
    SPDX-License-Identifier: EPL-2.0
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>org.eclipse.hono</groupId>
    <artifactId>hono-bom</artifactId>
    <version>1.9.0-SNAPSHOT</version>
    <relativePath>../bom</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>hono-tests</artifactId>

  <name>Hono Integration Tests</name>
  <description>Integration tests verifying Hono's APIs.
Test cases are run against Docker images of Hono server + (Apache Qpid Dispatch Router and ActiveMQ Artemis broker).</description>
  <url>https://www.eclipse.org/hono</url>

  <properties>
    <maven.javadoc.skip>true</maven.javadoc.skip>
    <maven.source.skip>true</maven.source.skip>
    <maven.install.skip>true</maven.install.skip>
    <gpg.skip>true</gpg.skip>

    <!--
      Hono service names
    -->
    <hono.amqp-network.host>hono-dispatch-router.hono</hono.amqp-network.host>
    <hono.device-connection.host>hono-service-device-connection.hono</hono.device-connection.host>
    <hono.commandrouter.host>hono-service-command-router.hono</hono.commandrouter.host>
    <hono.registration.host>hono-service-device-registry.hono</hono.registration.host>
    <hono.auth.host>hono-service-auth.hono</hono.auth.host>

    <!-- duration before vert.x complains about blocking the event loop -->
    <max.event-loop.execute-time>PT5S</max.event-loop.execute-time>

    <!-- logging profile used by all Hono components: prod, dev or trace -->
    <logging.profile>prod</logging.profile>
    <!-- maximum time (milliseconds) to wait for successful startup of a single service component -->
    <service.startup.timeout>120000</service.startup.timeout>
    <!-- color used by components of the AMQP Messaging Network for logging -->
    <log.color.amqp-network>magenta</log.color.amqp-network>
    <log.color.kafka>magenta</log.color.kafka>
    <!-- color used by components of the device registry for logging -->
    <log.color.hono-device-registry>green</log.color.hono-device-registry>
    <!-- color used by protocol adapters for logging -->
    <log.color.hono-protocol-adapters>red</log.color.hono-protocol-adapters>
    <!-- color used by remaining Hono services for logging -->
    <log.color.hono-services>yellow</log.color.hono-services>
    <!-- color used by extra (non-Hono) services for logging -->
    <log.color.extra-services>cyan</log.color.extra-services>

    <!--
      Properties shared by all protocol adapters
    -->
    <link.establishment.timeout>5000</link.establishment.timeout>
    <flow.latency>1000</flow.latency>
    <request.timeout>500</request.timeout>
    <adapter.sendMessageToDeviceTimeout>1000</adapter.sendMessageToDeviceTimeout>
    <!-- use minimum cost factor in order to speed up test execution -->
    <max.bcrypt.costFactor>4</max.bcrypt.costFactor>

    <!--
     Properties defining whether the Device Connection service (now deprecated) or the Command Router service
     shall be used for Command & Control. The default here lets the Command Router service be used.
     See the 'device-connection-service' maven profile below for the Device Connection service values.
     -->
    <hono.command-related-service.configname>commandRouter</hono.command-related-service.configname>
    <hono.command-related-service.host>${hono.commandrouter.host}</hono.command-related-service.host>

    <hono.command-router.config-dir>etc/hono</hono.command-router.config-dir>
    <hono.command-router.disabled>false</hono.command-router.disabled>
    <hono.command-router.image>hono-service-command-router</hono.command-router.image>
    <hono.command-router.max-mem>314572800</hono.command-router.max-mem>

    <hono.device-connection.disabled>true</hono.device-connection.disabled>

    <!--
      Messaging related properties - AMQP is used as the default one.
    -->
    <hono.messaging.type>amqp</hono.messaging.type>
    <hono.kafka.disabled>true</hono.kafka.disabled>
    <hono.kafka.log-level>WARN</hono.kafka.log-level>
    <hono.kafka.bootstrap.servers></hono.kafka.bootstrap.servers>

    <!--
      Device Registry related properties - The MongoDB based device registry is used as the default one.
    -->
    <!-- should be set to false if testing against a registry that doesn't support comparing client context
         when retrieving credentials -->
    <hono.deviceregistry.credentials.supportsClientContext>true</hono.deviceregistry.credentials.supportsClientContext>
    <!-- should be set to false if testing against a registry that doesn't support GW mode -->
    <hono.deviceregistry.supportsGatewayMode>true</hono.deviceregistry.supportsGatewayMode>
    <!-- should be set to false if testing against a registry that doesn't support the "search Devices" operation -->
    <hono.deviceregistry.supportsSearchDevices>true</hono.deviceregistry.supportsSearchDevices>
    <!-- should be set to false if testing against a registry that doesn't support the "search Tenants" operation -->
    <hono.deviceregistry.supportsSearchTenants>true</hono.deviceregistry.supportsSearchTenants>
    <hono.deviceregistry.image>hono-service-device-registry-mongodb</hono.deviceregistry.image>
    <hono.deviceregistry.resources.folder>deviceregistry-mongodb</hono.deviceregistry.resources.folder>
    <!-- default memory limit of the device registry container is 300MiB -->
    <hono.deviceregistry.containerMemoryLimit>314572800</hono.deviceregistry.containerMemoryLimit>
    <!-- Spring application profiles to activate for the registry -->
    <hono.deviceregistry.spring.profiles>${logging.profile}</hono.deviceregistry.spring.profiles>

    <hono.mongodb.disabled>false</hono.mongodb.disabled>
    <hono.mongodb.host>hono-mongodb.hono</hono.mongodb.host>
    <hono.mongodb.port>27017</hono.mongodb.port>
    <hono.mongodb.username>device-registry@HONO</hono.mongodb.username>
    <hono.mongodb.password>device-registry-secret</hono.mongodb.password>
    <hono.mongodb.database.name>hono-it-tests</hono.mongodb.database.name>

    <hono.postgres.disabled>true</hono.postgres.disabled>

    <hono.amqp-adapter.image>hono-adapter-amqp-vertx</hono.amqp-adapter.image>
    <hono.amqp-adapter.config-dir>etc/hono</hono.amqp-adapter.config-dir>
    <hono.amqp-adapter.max-mem>314572800</hono.amqp-adapter.max-mem>

    <hono.coap-adapter.image>hono-adapter-coap-vertx</hono.coap-adapter.image>
    <hono.coap-adapter.config-dir>etc/hono</hono.coap-adapter.config-dir>
    <hono.coap-adapter.max-mem>314572800</hono.coap-adapter.max-mem>

    <hono.http-adapter.image>hono-adapter-http-vertx</hono.http-adapter.image>
    <hono.http-adapter.config-dir>etc/hono</hono.http-adapter.config-dir>
    <hono.http-adapter.max-mem>314572800</hono.http-adapter.max-mem>
    <hono.http-adapter.nativeTlsRequired>true</hono.http-adapter.nativeTlsRequired>

    <hono.mqtt-adapter.image>hono-adapter-mqtt-vertx</hono.mqtt-adapter.image>
    <hono.mqtt-adapter.config-dir>etc/hono</hono.mqtt-adapter.config-dir>
    <hono.mqtt-adapter.max-mem>314572800</hono.mqtt-adapter.max-mem>

    <hono.auth-server.image>hono-service-auth</hono.auth-server.image>
    <hono.auth-server.config-dir>etc/hono</hono.auth-server.config-dir>
    <hono.auth-server.max-mem>205520896</hono.auth-server.max-mem>

    <default.java.options>
      -XX:MinRAMPercentage=80
      -XX:MaxRAMPercentage=90
      -DenableForcedCommandRerouting=true
    </default.java.options>
    <amqp.java.options></amqp.java.options>
    <coap.java.options></coap.java.options>
    <http.java.options></http.java.options>
    <mqtt.java.options></mqtt.java.options>

    <trace.frames>0</trace.frames>
    <jaeger.disabled>true</jaeger.disabled>
    <jaeger.host>hono-jaeger.hono</jaeger.host>
    <jaeger.query.port>18080</jaeger.query.port>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-demo-certs</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-tcnative-boringssl-static</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-transport-native-epoll</artifactId>
      <classifier>linux-x86_64</classifier>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-transport-native-kqueue</artifactId>
      <classifier>osx-x86_64</classifier>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-service-device-registry-base</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>core-test-utils</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-proton</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>jcl-over-slf4j</artifactId>
        <scope>test</scope>
      </dependency>
    <dependency>
      <groupId>org.apache.qpid</groupId>
      <artifactId>qpid-jms-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-mqtt</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.californium</groupId>
      <artifactId>californium-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.californium</groupId>
      <artifactId>scandium</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-adapter-amqp</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-registry-amqp</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-application-amqp</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client-application-kafka</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>${project.basedir}/src/test/resources</directory>
        <filtering>true</filtering>
        <targetPath>${project.build.directory}/resources</targetPath>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>ci_environment</id>
      <activation>
        <property>
          <name>CI</name>
        </property>
      </activation>
      <!-- 
        relax timeouts when running on CI environment in order to account for (very) limited
        CPU resources.
       -->
      <properties>
        <adapter.sendMessageToDeviceTimeout>3000</adapter.sendMessageToDeviceTimeout>
        <max.event-loop.execute-time>20000</max.event-loop.execute-time>
        <request.timeout>3000</request.timeout>
        <service.startup.timeout>240000</service.startup.timeout>
      </properties>
    </profile>
    <profile>
      <id>device-connection-service</id>
      <activation>
        <property>
          <name>hono.commandrouting.mode</name>
          <value>dev-con-service</value>
        </property>
      </activation>
      <properties>
        <hono.command-related-service.configname>deviceConnection</hono.command-related-service.configname>
        <hono.command-related-service.host>${hono.device-connection.host}</hono.command-related-service.host>
        <hono.command-router.disabled>true</hono.command-router.disabled>
        <hono.device-connection.disabled>false</hono.device-connection.disabled>
      </properties>
    </profile>
    <profile>
      <id>kafka</id>
      <activation>
        <property>
          <name>hono.messaging.type</name>
          <value>kafka</value>
        </property>
      </activation>
      <properties>
        <hono.kafka.disabled>false</hono.kafka.disabled>
        <hono.kafka.bootstrap.servers>kafka.hono:9092</hono.kafka.bootstrap.servers>
        <request.timeout>4000</request.timeout>
        <!--The max memory command router is increased to 500 MB-->
        <hono.command-router.max-mem>524288000</hono.command-router.max-mem>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>3.0.0</version>
            <executions>
              <execution>
                <id>reserve-network-port</id>
                <goals>
                  <goal>reserve-network-port</goal>
                </goals>
                <phase>initialize</phase>
                <configuration>
                  <randomPort>true</randomPort>
                  <portNames>
                    <!--
                      The port on which Kafka's advertised listener for the Docker-external clients is set up
                      must be the same on which Docker exposes the container port to the "outside".
                      The docker-maven-plugin cannot be used since the advertised listener is defined as an
                      environment variable of the container and the plugin chooses the random port after the definition
                      of the container is made.
                    -->
                    <portName>kafka.port</portName>
                  </portNames>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <!--
              The standard Maven plugin for writing properties cannot be used as it is only capable of writing
              all project properties to file but not specific ones only.
            -->
            <groupId>com.internetitem</groupId>
            <artifactId>write-properties-file-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>write-properties-file</goal>
                </goals>
                <configuration>
                  <filename>kafka.port.properties</filename>
                  <outputDirectory>${project.build.directory}/docker</outputDirectory>
                  <properties>
                    <property>
                      <name>kafka.port</name>
                      <value>${kafka.port}</value>
                    </property>
                    <property>
                      <name>docker.host.address</name>
                      <value>${docker.host.address}</value>
                    </property>
                  </properties>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemProperties>
                <downstream.bootstrap.servers>${docker.host.address}:${kafka.port}</downstream.bootstrap.servers>
              </systemProperties>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>device-registry-file</id>
      <activation>
        <property>
          <name>hono.deviceregistry.type</name>
          <value>file</value>
        </property>
      </activation>
      <properties>
        <hono.mongodb.disabled>true</hono.mongodb.disabled>
        <hono.postgres.disabled>true</hono.postgres.disabled>
        <hono.deviceregistry.image>hono-service-device-registry-jdbc</hono.deviceregistry.image>
        <hono.deviceregistry.resources.folder>deviceregistry-jdbc-h2</hono.deviceregistry.resources.folder>
        <hono.deviceregistry.spring.profiles>registry-adapter,registry-management,tenant-service,create-schema,${logging.profile}</hono.deviceregistry.spring.profiles>
        <hono.deviceregistry.credentials.supportsClientContext>false</hono.deviceregistry.credentials.supportsClientContext>
        <hono.deviceregistry.supportsSearchDevices>false</hono.deviceregistry.supportsSearchDevices>
        <hono.deviceregistry.supportsSearchTenants>false</hono.deviceregistry.supportsSearchTenants>
        <!-- increase memory limit of the device registry container to 400MB in order to accommodate for embedded H2 DB -->
        <hono.deviceregistry.containerMemoryLimit>400000000</hono.deviceregistry.containerMemoryLimit>
        <hono.jdbc.db.url>jdbc:h2:file://var/tmp/hono</hono.jdbc.db.url>
      </properties>
    </profile>
    <profile>
      <id>device-registry-jdbc</id>
      <activation>
        <property>
          <name>hono.deviceregistry.type</name>
          <value>jdbc</value>
        </property>
      </activation>
      <properties>
        <hono.mongodb.disabled>true</hono.mongodb.disabled>
        <hono.postgres.disabled>false</hono.postgres.disabled>
        <hono.deviceregistry.image>hono-service-device-registry-jdbc</hono.deviceregistry.image>
        <hono.deviceregistry.resources.folder>deviceregistry-jdbc-postgres</hono.deviceregistry.resources.folder>
        <hono.deviceregistry.spring.profiles>registry-adapter,registry-management,tenant-service,create-schema,${logging.profile}</hono.deviceregistry.spring.profiles>
        <hono.deviceregistry.credentials.supportsClientContext>false</hono.deviceregistry.credentials.supportsClientContext>
        <hono.deviceregistry.supportsSearchDevices>false</hono.deviceregistry.supportsSearchDevices>
        <hono.deviceregistry.supportsSearchTenants>false</hono.deviceregistry.supportsSearchTenants>
        <hono.jdbc.db.url>jdbc:postgresql://hono-jdbc-db.hono:5432/</hono.jdbc.db.url>
        <hono.jdbc.db.admin.username>postgres</hono.jdbc.db.admin.username>
        <hono.jdbc.db.admin.password>change-me</hono.jdbc.db.admin.password>
        <hono.jdbc.db.registry.username>${hono.jdbc.db.admin.username}</hono.jdbc.db.registry.username>
        <hono.jdbc.db.registry.password>${hono.jdbc.db.admin.password}</hono.jdbc.db.registry.password>
      </properties>
    </profile>
    <profile>
      <id>components-quarkus-jvm</id>
      <activation>
        <property>
          <name>hono.components.type</name>
          <value>quarkus-jvm</value>
        </property>
      </activation>
      <properties>
        <hono.amqp-adapter.config-dir>opt/hono/config</hono.amqp-adapter.config-dir>
        <hono.amqp-adapter.image>hono-adapter-amqp-vertx-quarkus</hono.amqp-adapter.image>

        <hono.coap-adapter.config-dir>opt/hono/config</hono.coap-adapter.config-dir>
        <hono.coap-adapter.image>hono-adapter-coap-vertx-quarkus</hono.coap-adapter.image>

        <hono.http-adapter.config-dir>opt/hono/config</hono.http-adapter.config-dir>
        <hono.http-adapter.image>hono-adapter-http-vertx-quarkus</hono.http-adapter.image>
        <hono.http-adapter.nativeTlsRequired>false</hono.http-adapter.nativeTlsRequired>

        <hono.mqtt-adapter.config-dir>opt/hono/config</hono.mqtt-adapter.config-dir>
        <hono.mqtt-adapter.image>hono-adapter-mqtt-vertx-quarkus</hono.mqtt-adapter.image>

        <hono.auth-server.config-dir>opt/hono/config</hono.auth-server.config-dir>
        <hono.auth-server.image>hono-service-auth-quarkus</hono.auth-server.image>

        <hono.command-router.config-dir>opt/hono/config</hono.command-router.config-dir>
        <hono.command-router.image>hono-service-command-router-quarkus</hono.command-router.image>
      </properties>
    </profile>
    <profile>
      <id>components-quarkus-native</id>
      <activation>
        <property>
          <name>hono.components.type</name>
          <value>quarkus-native</value>
        </property>
      </activation>
      <properties>
        <hono.amqp-adapter.config-dir>opt/hono/config</hono.amqp-adapter.config-dir>
        <hono.amqp-adapter.image>hono-adapter-amqp-vertx-quarkus-native</hono.amqp-adapter.image>
        <hono.amqp-adapter.max-mem>67108864</hono.amqp-adapter.max-mem>
        <hono.amqp-adapter.useNativeTransport>false</hono.amqp-adapter.useNativeTransport>

        <hono.coap-adapter.config-dir>opt/hono/config</hono.coap-adapter.config-dir>
        <hono.coap-adapter.image>hono-adapter-coap-vertx-quarkus-native</hono.coap-adapter.image>
        <hono.coap-adapter.max-mem>67108864</hono.coap-adapter.max-mem>
        <hono.coap-adapter.useNativeTransport>false</hono.coap-adapter.useNativeTransport>

        <hono.http-adapter.config-dir>opt/hono/config</hono.http-adapter.config-dir>
        <hono.http-adapter.image>hono-adapter-http-vertx-quarkus-native</hono.http-adapter.image>
        <hono.http-adapter.max-mem>67108864</hono.http-adapter.max-mem>
        <hono.http-adapter.nativeTlsRequired>false</hono.http-adapter.nativeTlsRequired>

        <hono.mqtt-adapter.config-dir>opt/hono/config</hono.mqtt-adapter.config-dir>
        <hono.mqtt-adapter.image>hono-adapter-mqtt-vertx-quarkus-native</hono.mqtt-adapter.image>
        <hono.mqtt-adapter.max-mem>67108864</hono.mqtt-adapter.max-mem>
        <hono.mqtt-adapter.useNativeTransport>false</hono.mqtt-adapter.useNativeTransport>

        <hono.auth-server.config-dir>opt/hono/config</hono.auth-server.config-dir>
        <hono.auth-server.image>hono-service-auth-quarkus-native</hono.auth-server.image>
        <hono.auth-server.max-mem>33554432</hono.auth-server.max-mem>

        <hono.command-router.config-dir>opt/hono/config</hono.command-router.config-dir>
        <hono.command-router.image>hono-service-command-router-quarkus-native</hono.command-router.image>
        <hono.command-router.max-mem>67108864</hono.command-router.max-mem>
      </properties>
    </profile>
    <profile>
      <id>run-tests</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <!--
                  Execution and configuration for copying certificates and config files
                  from related modules "target/config" folder so that we can include them in the image.
                 -->
                <id>copy_demo_certs</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <includeArtifactIds>hono-demo-certs</includeArtifactIds>
                  <outputDirectory>${project.build.directory}/certs</outputDirectory>
                  <includes>
                    *.pem,
                    *.p12,
                    *.jks
                  </includes>
                  <useSubDirectoryPerArtifact>false</useSubDirectoryPerArtifact>
                  <stripClassifier>true</stripClassifier>
                  <stripVersion>true</stripVersion>
                  <excludeTransitive>true</excludeTransitive>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <verbose>true</verbose>
              <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
              <startParallel>false</startParallel>
              <images>
                <!-- ##### Mongo DB instance for the device registry ##### -->
                <image>
                  <name>${docker.repository}/hono-mongodb-test:${project.version}</name>
                  <build>
                    <skip>${hono.mongodb.disabled}</skip>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${mongodb-image.name}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSet>
                          <directory>${project.build.directory}/resources/mongodb/init_db</directory>
                          <outputDirectory>docker-entrypoint-initdb.d/</outputDirectory>
                          <includes>
                            <include>*</include>
                          </includes>
                        </fileSet>
                        <file>
                          <source>${project.build.directory}/resources/mongodb/mongod.conf</source>
                          <outputDirectory>etc/mongo/</outputDirectory>
                        </file>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <skip>${hono.mongodb.disabled}</skip>
                    <cmd>
                      <arg>--config</arg>
                      <arg>/etc/mongo/mongod.conf</arg>
                    </cmd>
                    <ports>
                      <port>+mongodb.ip:mongodb.port:${hono.mongodb.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/mongodb.port.properties</portPropertyFile>
                    <env>
                      <MONGO_INITDB_DATABASE>${hono.mongodb.database.name}</MONGO_INITDB_DATABASE>
                    </env>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>${hono.mongodb.host}</alias>
                    </network>
                    <memorySwap>524288000</memorySwap>
                    <memory>524288000</memory>
                    <log>
                      <prefix>MONGODB</prefix>
                      <color>${log.color.hono-device-registry}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(waiting for connections on port).*</log>
                    </wait>
                  </run>
                </image>
                <!-- ##### PostgreSQL instance for the device registry ##### -->
                <image>
                  <name>${postgresql-image.name}</name>
                  <run>
                    <skip>${hono.postgres.disabled}</skip>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <portPropertyFile>${project.build.directory}/docker/jdbc-db.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-jdbc-db.hono</alias>
                    </network>
                    <memorySwap>134217728</memorySwap>
                    <memory>134217728</memory>
                    <env>
                      <POSTGRES_PASSWORD>${hono.jdbc.db.admin.password}</POSTGRES_PASSWORD>
                    </env>
                    <log>
                      <prefix>POSTGRES</prefix>
                      <color>${log.color.hono-device-registry}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(listening on IPv4 address).*</log>
                    </wait>
                  </run>
                </image>
                <!-- ##### Jaeger tracing component ##### -->
                <image>
                  <name>${jaeger.image.name}</name>
                  <run>
                    <skip>${jaeger.disabled}</skip>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <ports>
                      <port>+jaeger.ip:jaeger.health.port:14269</port><!-- admin-http -->
                      <port>+jaeger.ip:jaeger.query.port:16686</port><!-- query-http -->
                      <port>+jaeger.ip:jaeger.agent.port:6831/udp</port><!-- agent (compact thrift protocol) -->
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/jaeger.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-jaeger.hono</alias>
                    </network>
                    <!--
                      Setting the swap property to the same value as the memory property effectively
                      prevents the container from swapping at all.
                      This way we can force the same behavior for running the integration
                      tests on both a local machine (which usually has swap space available) as
                      well as on Travis where there is no swap space available on the build job VMs.
                      We can thus detect OOM problems when running locally as opposed to only
                      later on Travis.
                     -->
                    <memorySwap>314572800</memorySwap>
                    <memory>314572800</memory>
                    <env>
                      <MEMORY_MAX_TRACES>2000</MEMORY_MAX_TRACES>
                    </env>
                    <log>
                      <prefix>JAEGER</prefix>
                      <color>${log.color.extra-services}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${jaeger.ip}:${jaeger.health.port}/health</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### Authentication service ##### -->
                <image>
                  <name>${docker.repository}/hono-service-auth-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/${hono.auth-server.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/auth</directory>
                            <outputDirectory>${hono.auth-server.config-dir}</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>auth-server-*.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+auth.ip:auth.amqps.port:5671</port>
                      <port>+auth.ip:auth.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/auth.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-service-auth.hono</alias>
                    </network>
                    <!-- 
                      Setting the swap property to the same value as the memory property effectively
                      prevents the container from swapping at all.
                      This way we can force the same behavior for running the integration
                      tests on both a local machine (which usually has swap space available) as
                      well as on Travis where there is no swap space available on the build job VMs.
                      We can thus detect OOM problems when running locally as opposed to only
                      later on Travis.
                     -->
                    <memorySwap>${hono.auth-server.max-mem}</memorySwap>
                    <memory>${hono.auth-server.max-mem}</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>authentication-impl,${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>AUTH</prefix>
                      <color>${log.color.hono-services}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${auth.ip}:${auth.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### ActiveMQ Artemis message broker ##### -->
                <image>
                  <name>${docker.repository}/hono-artemis-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${artemis.image.name}</from>
                    <ports>
                      <port>5671</port>
                    </ports>
                    <entryPoint>
                      <shell>/opt/apache-artemis/bin/launch.sh start</shell>
                    </entryPoint>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/opt/apache-artemis/conf</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/artemis</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>artemisKeyStore.p12</include>
                              <include>trustStore.jks</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+broker.ip:broker.amqp.port:5671</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/broker.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-artemis.hono</alias>
                    </network>
                    <memorySwap>419430400</memorySwap>
                    <memory>419430400</memory>
                    <env>
                      <AMQ_NAME>custom</AMQ_NAME>
                      <HOME>/var/run/artemis/</HOME>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>ARTEMIS</prefix>
                      <color>${log.color.amqp-network}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(Server is now live)$</log>
                    </wait>
                  </run>
                </image>
                <!-- ##### Qpid Dispatch Router ##### -->
                <image>
                  <name>${docker.repository}/hono-dispatch-router-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${dispatch-router.image.name}</from>
                    <ports>
                      <port>5671</port>
                      <port>5672</port>
                      <port>5673</port>
                    </ports>
                    <cmd>
                      <exec>
                        <arg>/sbin/qdrouterd</arg>
                        <arg>-c</arg>
                        <arg>/etc/hono/qdrouterd-with-broker.json</arg>
                      </exec>
                    </cmd>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/etc/hono</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/qpid</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>qdrouter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+qpid.ip:qpid.amqps.port:5671</port>
                      <port>+qpid.ip:qpid.amqp.port:5672</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/qpid.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-dispatch-router.hono</alias>
                    </network>
                    <memorySwap>268435456</memorySwap>
                    <memory>268435456</memory>
                    <log>
                      <prefix>QPID</prefix>
                      <color>${log.color.amqp-network}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(Listening on 0.0.0.0:5673)$</log>
                    </wait>
                    <env>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                  </run>
                </image>
                <!-- ##### Zookeeper ##### -->
                <image>
                  <name>${zookeeper.image.name}</name>
                  <alias>hono-zookeeper-test</alias>
                  <run>
                    <skip>${hono.kafka.disabled}</skip>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>zookeeper.hono</alias>
                    </network>
                    <log>
                      <prefix>Zookeeper</prefix>
                      <color>${log.color.kafka}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(binding to port).*</log>
                    </wait>
                    <env>
                      <ZOOKEEPER_CLIENT_PORT>2181</ZOOKEEPER_CLIENT_PORT>
                      <ZOOKEEPER_TICK_TIME>2000</ZOOKEEPER_TICK_TIME>
                    </env>
                  </run>
                </image>
                <!-- ##### Kafka ##### -->
                <image>
                  <name>${kafka.image.name}</name>
                  <alias>hono-kafka-test</alias>
                  <run>
                    <skip>${hono.kafka.disabled}</skip>
                    <ports>
                      <port>${kafka.port}:${kafka.port}</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>kafka.hono</alias>
                    </network>
                    <log>
                      <prefix>Kafka</prefix>
                      <color>${log.color.kafka}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(\[KafkaServer id=1\] started).*</log>
                    </wait>
                    <env>
                      <KAFKA_BROKER_ID>1</KAFKA_BROKER_ID>
                      <KAFKA_ZOOKEEPER_CONNECT>zookeeper.hono:2181</KAFKA_ZOOKEEPER_CONNECT>
                      <!-- setting the default listener, "PLAINTEXT", as this is the default value of KAFKA_INTER_BROKER_LISTENER_NAME -->
                      <KAFKA_LISTENER_SECURITY_PROTOCOL_MAP>PLAINTEXT:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT</KAFKA_LISTENER_SECURITY_PROTOCOL_MAP>
                      <KAFKA_ADVERTISED_LISTENERS>PLAINTEXT://kafka.hono:9092,LISTENER_EXTERNAL://${docker.host.address}:${kafka.port}</KAFKA_ADVERTISED_LISTENERS>
                      <KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR>1</KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR>
                      <KAFKA_TRANSACTION_STATE_LOG_MIN_ISR>1</KAFKA_TRANSACTION_STATE_LOG_MIN_ISR>
                      <KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR>1</KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR>
                      <KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS>0</KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS>
                      <!-- log level for kafka.server.KafkaServer needs to stay on INFO so that docker-maven-plugin can wait for container startup -->
                      <KAFKA_LOG4J_LOGGERS>kafka.cluster=${hono.kafka.log-level},kafka.controller=${hono.kafka.log-level},kafka.coordinator=${hono.kafka.log-level},kafka.log=${hono.kafka.log-level},kafka.authorizer=${hono.kafka.log-level},kafka.zk=${hono.kafka.log-level},state.change.logger=${hono.kafka.log-level},kafka.server=${hono.kafka.log-level},kafka.server.KafkaServer=INFO</KAFKA_LOG4J_LOGGERS>
                    </env>
                  </run>
                </image>
                <!-- ##### Device Registration service ##### -->
                <image>
                  <name>${docker.repository}/hono-service-device-registry-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/${hono.deviceregistry.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/${hono.deviceregistry.resources.folder}</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>device-registry-*.pem</include>
                              <include>auth-server-cert.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+deviceregistry.ip:deviceregistry.amqp.port:5672</port>
                      <port>+deviceregistry.ip:deviceregistry.http.port:8080</port>
                      <port>+deviceregistry.ip:deviceregistry.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/deviceregistry.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-service-device-registry.hono</alias>
                    </network>
                    <memorySwap>${hono.deviceregistry.containerMemoryLimit}</memorySwap>
                    <memory>${hono.deviceregistry.containerMemoryLimit}</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${hono.deviceregistry.spring.profiles}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                      <JAEGER_SERVICE_NAME>device-registry</JAEGER_SERVICE_NAME>
                      <JAEGER_AGENT_HOST>${jaeger.host}</JAEGER_AGENT_HOST>
                      <JAEGER_AGENT_PORT>6831</JAEGER_AGENT_PORT>
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                    </env>
                    <log>
                      <prefix>REGISTRY</prefix>
                      <color>${log.color.hono-device-registry}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${deviceregistry.ip}:${deviceregistry.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### Device Connection service ##### -->
                <image>
                  <name>${docker.repository}/hono-service-device-connection-test:${project.version}</name>
                  <build>
                    <skip>${hono.device-connection.disabled}</skip>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/hono-service-device-connection:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/deviceconnection</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>device-connection-*.pem</include>
                              <include>auth-server-cert.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <skip>${hono.device-connection.disabled}</skip>
                    <ports>
                      <port>+deviceconnection.ip:deviceconnection.amqp.port:5672</port>
                      <port>+deviceconnection.ip:deviceconnection.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/deviceconnection.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-service-device-connection.hono</alias>
                    </network>
                    <memorySwap>314572800</memorySwap>
                    <memory>314572800</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile},embedded-cache</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                      <JAEGER_SERVICE_NAME>device-connection</JAEGER_SERVICE_NAME>
                      <JAEGER_AGENT_HOST>${jaeger.host}</JAEGER_AGENT_HOST>
                      <JAEGER_AGENT_PORT>6831</JAEGER_AGENT_PORT>
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                    </env>
                    <log>
                      <prefix>DEVCON</prefix>
                      <color>${log.color.hono-services}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${deviceconnection.ip}:${deviceconnection.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### Command Router service (may also act as Device Connection service via 'enable-device-connection-endpoint') ##### -->
                <image>
                  <name>${docker.repository}/hono-service-command-router-test:${project.version}</name>
                  <build>
                    <skip>${hono.command-router.disabled}</skip>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/${hono.command-router.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/commandrouter</directory>
                            <outputDirectory>${hono.command-router.config-dir}</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>command-router-*.pem</include>
                              <include>auth-server-cert.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <skip>${hono.command-router.disabled}</skip>
                    <ports>
                      <port>+commandrouter.ip:commandrouter.amqp.port:5672</port>
                      <port>+commandrouter.ip:commandrouter.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/commandrouter.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-service-command-router.hono</alias>
                    </network>
                    <memorySwap>${hono.command-router.max-mem}</memorySwap>
                    <memory>${hono.command-router.max-mem}</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile},embedded-cache,enable-device-connection-endpoint</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                      <JAEGER_SERVICE_NAME>command-router</JAEGER_SERVICE_NAME>
                      <JAEGER_AGENT_HOST>${jaeger.host}</JAEGER_AGENT_HOST>
                      <JAEGER_AGENT_PORT>6831</JAEGER_AGENT_PORT>
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                    </env>
                    <log>
                      <prefix>CMDROUTER</prefix>
                      <color>${log.color.hono-services}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${commandrouter.ip}:${commandrouter.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### HTTP adapter ##### -->
                <image>
                  <name>${docker.repository}/hono-adapter-http-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/${hono.http-adapter.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <dependencySets>
                          <dependencySet>
                            <includes>
                              <!--  use openSSL in HTTP adapter -->
                              <include>io.netty:netty-tcnative-boringssl-static</include>
                            </includes>
                            <outputDirectory>opt/hono/extensions</outputDirectory>
                          </dependencySet>
                        </dependencySets>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/http</directory>
                            <outputDirectory>${hono.http-adapter.config-dir}</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>http-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+http.ip:http.port:8080</port>
                      <port>https.port:8443</port>
                      <port>+http.ip:http.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/adapter.http.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-http-vertx.hono</alias>
                    </network>
                    <memorySwap>${hono.http-adapter.max-mem}</memorySwap>
                    <memory>${hono.http-adapter.max-mem}</memory>
                    <env>
                      <LOGGING_CONFIG>file:/etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:/etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${http.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                      <JAEGER_SERVICE_NAME>hono-adapter-http</JAEGER_SERVICE_NAME>
                      <JAEGER_AGENT_HOST>${jaeger.host}</JAEGER_AGENT_HOST>
                      <JAEGER_AGENT_PORT>6831</JAEGER_AGENT_PORT>
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                    </env>
                    <log>
                      <prefix>HTTP</prefix>
                      <color>${log.color.hono-protocol-adapters}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${http.ip}:${http.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### MQTT adapter ##### -->
                <image>
                  <name>${docker.repository}/hono-adapter-mqtt-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/${hono.mqtt-adapter.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/mqtt</directory>
                            <outputDirectory>${hono.mqtt-adapter.config-dir}</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>mqtt-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+mqtt.ip:mqtt.port:1883</port>
                      <port>mqtts.port:8883</port>
                      <port>+mqtt.ip:mqtt.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/adapter.mqtt.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-mqtt-vertx.hono</alias>
                    </network>
                    <memorySwap>${hono.mqtt-adapter.max-mem}</memorySwap>
                    <memory>${hono.mqtt-adapter.max-mem}</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${mqtt.java.options}</JDK_JAVA_OPTIONS>
                      <!--
                        disable -Xmx calculation done by the runJava.sh script
                        used by the Quarkus based images
                      -->
                      <JAVA_MAX_MEM_RATIO>0</JAVA_MAX_MEM_RATIO>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                      <JAEGER_SERVICE_NAME>hono-adapter-mqtt</JAEGER_SERVICE_NAME>
                      <JAEGER_AGENT_HOST>${jaeger.host}</JAEGER_AGENT_HOST>
                      <JAEGER_AGENT_PORT>6831</JAEGER_AGENT_PORT>
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                    </env>
                    <log>
                      <prefix>MQTT</prefix>
                      <color>${log.color.hono-protocol-adapters}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${mqtt.ip}:${mqtt.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### AMQP adapter ##### -->
                <image>
                  <name>${docker.repository}/hono-adapter-amqp-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/${hono.amqp-adapter.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/amqp</directory>
                            <outputDirectory>${hono.amqp-adapter.config-dir}</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>amqp-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+adapter.amqp.ip:adapter.amqp.port:5672</port>
                      <port>+adapter.amqps.ip:adapter.amqps.port:5671</port>
                      <port>+adapter.amqp.ip:adapter.amqp.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/adapter.amqp.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-amqp-vertx.hono</alias>
                    </network>
                    <memorySwap>${hono.amqp-adapter.max-mem}</memorySwap>
                    <memory>${hono.amqp-adapter.max-mem}</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${amqp.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                      <JAEGER_SERVICE_NAME>hono-adapter-amqp</JAEGER_SERVICE_NAME>
                      <JAEGER_AGENT_HOST>${jaeger.host}</JAEGER_AGENT_HOST>
                      <JAEGER_AGENT_PORT>6831</JAEGER_AGENT_PORT>
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                    </env>
                    <log>
                      <prefix>AMQP</prefix>
                      <color>${log.color.hono-protocol-adapters}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${adapter.amqp.ip}:${adapter.amqp.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### CoAP adapter ##### -->
                <image>
                  <name>${docker.repository}/hono-adapter-coap-test:${project.version}</name>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.repository}/${hono.coap-adapter.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/coap</directory>
                            <outputDirectory>${hono.coap-adapter.config-dir}</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>coap-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+coap.ip:coap.port:5683/udp</port>
                      <port>coaps.port:5684/udp</port>
                      <port>+coap.ip:coap.health.port:${vertx.health.port}</port>
                    </ports>
                    <portPropertyFile>${project.build.directory}/docker/adapter.coap.port.properties</portPropertyFile>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-coap-vertx.hono</alias>
                    </network>
                    <memorySwap>${hono.coap-adapter.max-mem}</memorySwap>
                    <memory>${hono.coap-adapter.max-mem}</memory>
                    <env>
                      <LOGGING_CONFIG>file:/etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:/etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${coap.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                      <JAEGER_SERVICE_NAME>hono-adapter-coap</JAEGER_SERVICE_NAME>
                      <JAEGER_AGENT_HOST>${jaeger.host}</JAEGER_AGENT_HOST>
                      <JAEGER_AGENT_PORT>6831</JAEGER_AGENT_PORT>
                      <JAEGER_SAMPLER_TYPE>const</JAEGER_SAMPLER_TYPE>
                      <JAEGER_SAMPLER_PARAM>1</JAEGER_SAMPLER_PARAM>
                    </env>
                    <log>
                      <prefix>COAP</prefix>
                      <color>${log.color.hono-protocol-adapters}</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${coap.ip}:${coap.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>build_images</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>start-docker</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-and-remove-docker</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
                <configuration>
                  <removeVolumes>true</removeVolumes>
                  <removeNamePattern>**/hono-*-test:*</removeNamePattern>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <environmentVariables>
                <PN_TRACE_FRM>${trace.frames}</PN_TRACE_FRM>
              </environmentVariables>
              <systemProperties>
                <auth.host>${auth.ip}</auth.host>
                <auth.amqps.port>${auth.amqps.port}</auth.amqps.port>
                <hono.username>hono-client</hono.username>
                <hono.password>secret</hono.password>
                <tenant.admin.username>http-adapter@HONO</tenant.admin.username>
                <tenant.admin.password>http-secret</tenant.admin.password>
                <downstream.host>${qpid.ip}</downstream.host>
                <downstream.amqp.port>${qpid.amqp.port}</downstream.amqp.port>
                <downstream.amqps.port>${qpid.amqps.port}</downstream.amqps.port>
                <downstream.username>consumer@HONO</downstream.username>
                <downstream.password>verysecret</downstream.password>
                <deviceconnection.enabled>${hono.command-router.disabled}</deviceconnection.enabled>
                <deviceconnection.host>${deviceconnection.ip}</deviceconnection.host>
                <deviceconnection.amqp.port>${deviceconnection.amqp.port}</deviceconnection.amqp.port>
                <commandrouter.host>${commandrouter.ip}</commandrouter.host>
                <commandrouter.amqp.port>${commandrouter.amqp.port}</commandrouter.amqp.port>
                <deviceregistry.host>${deviceregistry.ip}</deviceregistry.host>
                <deviceregistry.amqp.port>${deviceregistry.amqp.port}</deviceregistry.amqp.port>
                <deviceregistry.http.port>${deviceregistry.http.port}</deviceregistry.http.port>
                <deviceregistry.supportsGatewayMode>${hono.deviceregistry.supportsGatewayMode}</deviceregistry.supportsGatewayMode>
                <deviceregistry.credentials.supportsClientContext>${hono.deviceregistry.credentials.supportsClientContext}</deviceregistry.credentials.supportsClientContext>
                <deviceregistry.supportsSearchDevices>${hono.deviceregistry.supportsSearchDevices}</deviceregistry.supportsSearchDevices>
                <deviceregistry.supportsSearchTenants>${hono.deviceregistry.supportsSearchTenants}</deviceregistry.supportsSearchTenants>
                <adapter.coap.host>${coap.ip}</adapter.coap.host>
                <adapter.coap.port>${coap.port}</adapter.coap.port>
                <adapter.coaps.port>${coaps.port}</adapter.coaps.port>
                <adapter.http.host>${http.ip}</adapter.http.host>
                <adapter.http.port>${http.port}</adapter.http.port>
                <adapter.https.port>${https.port}</adapter.https.port>
                <adapter.mqtt.host>${mqtt.ip}</adapter.mqtt.host>
                <adapter.mqtt.port>${mqtt.port}</adapter.mqtt.port>
                <adapter.mqtts.port>${mqtts.port}</adapter.mqtts.port>
                <adapter.amqp.host>${adapter.amqp.ip}</adapter.amqp.host>
                <adapter.amqp.port>${adapter.amqp.port}</adapter.amqp.port>
                <adapter.amqps.port>${adapter.amqps.port}</adapter.amqps.port>
                <adapter.sendMessageToDeviceTimeout>${adapter.sendMessageToDeviceTimeout}</adapter.sendMessageToDeviceTimeout>
                <trust-store.path>${project.build.directory}/certs/trusted-certs.pem</trust-store.path>
                <test.env>${test.env}</test.env>
                <logging.profile>${logging.profile}</logging.profile>
                <max.bcrypt.costFactor>${max.bcrypt.costFactor}</max.bcrypt.costFactor>
                <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
<!--                 <javax.net.debug>ssl:handshake</javax.net.debug> -->
                <javax.net.ssl.trustStore>${project.build.directory}/certs/trustStore.jks</javax.net.ssl.trustStore>
                <javax.net.ssl.trustStorePassword>honotrust</javax.net.ssl.trustStorePassword>
              </systemProperties>
              <failIfNoSpecifiedTests>false</failIfNoSpecifiedTests>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>useRunningContainers</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>properties-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>initialize</phase>
                <goals>
                  <goal>read-project-properties</goal>
                </goals>
                <configuration>
                  <quiet>true</quiet>
                  <files>
                    <file>${project.build.directory}/docker/jaeger.port.properties</file>
                    <file>${project.build.directory}/docker/jdbc-db.port.properties</file>
                    <file>${project.build.directory}/docker/mongodb.port.properties</file>
                    <file>${project.build.directory}/docker/auth.port.properties</file>
                    <file>${project.build.directory}/docker/deviceregistry.port.properties</file>
                    <file>${project.build.directory}/docker/deviceconnection.port.properties</file>
                    <file>${project.build.directory}/docker/commandrouter.port.properties</file>
                    <file>${project.build.directory}/docker/broker.port.properties</file>
                    <file>${project.build.directory}/docker/qpid.port.properties</file>
                    <file>${project.build.directory}/docker/kafka.port.properties</file>
                    <file>${project.build.directory}/docker/adapter.http.port.properties</file>
                    <file>${project.build.directory}/docker/adapter.mqtt.port.properties</file>
                    <file>${project.build.directory}/docker/adapter.amqp.port.properties</file>
                    <file>${project.build.directory}/docker/adapter.coap.port.properties</file>
                  </files>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <!-- disable 'build', 'start' and 'stop-and-remove' executions -->
              <execution>
                <id>build_images</id>
                <phase>none</phase>
              </execution>
              <execution>
                <id>start-docker</id>
                <phase>none</phase>
              </execution>
              <execution>
                <id>stop-and-remove-docker</id>
                <phase>none</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>stopContainers</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <verbose>true</verbose>
            </configuration>
            <executions>
              <!-- disable 'build' and 'start' executions -->
              <execution>
                <id>build_images</id>
                <phase>none</phase>
              </execution>
              <execution>
                <id>start-docker</id>
                <phase>none</phase>
              </execution>
              <execution>
                <id>stop-and-remove-docker</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
                <configuration>
                  <removeVolumes>true</removeVolumes>
                  <removeNamePattern>**/hono-*-test:*</removeNamePattern>
                  <stopNamePattern>hono-*-test-*,all-in-one-*,cp-*,postgres-*</stopNamePattern>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>jaeger</id>
      <properties>
        <jaeger.disabled>false</jaeger.disabled>
      </properties>
    </profile>
  </profiles>
</project>
