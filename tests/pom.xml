<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2016, 2019 Contributors to the Eclipse Foundation
   
    See the NOTICE file(s) distributed with this work for additional
    information regarding copyright ownership.
   
    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License 2.0 which is available at
    http://www.eclipse.org/legal/epl-2.0
   
    SPDX-License-Identifier: EPL-2.0
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>org.eclipse.hono</groupId>
    <artifactId>hono-bom</artifactId>
    <version>1.2.0-SNAPSHOT</version>
    <relativePath>../bom</relativePath>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>hono-tests</artifactId>

  <name>Hono Integration Tests</name>
  <description>Integration tests verifying Hono's APIs.
Test cases are run against Docker images of Hono server + (Apache Qpid Dispatch Router and ActiveMQ Artemis broker).</description>
  <url>https://www.eclipse.org/hono</url>

  <properties>
    <maven.javadoc.skip>true</maven.javadoc.skip>
    <maven.source.skip>true</maven.source.skip>
    <maven.install.skip>true</maven.install.skip>
    <gpg.skip>true</gpg.skip>
    <service.startup.timeout>120000</service.startup.timeout>
    <link.establishment.timeout>5000</link.establishment.timeout>
    <flow.latency>1000</flow.latency>
    <request.timeout>500</request.timeout>
    <!-- use minimum number of iterations in order to speed up test execution --> 
    <max.bcrypt.iterations>4</max.bcrypt.iterations>
    <max.event-loop.execute-time>5000</max.event-loop.execute-time>
    <!-- should be set to false if testing against a registry that doesn't support GW mode -->
    <deviceregistry.supportsGatewayMode>true</deviceregistry.supportsGatewayMode>
    <hono.amqp-network.host>hono-dispatch-router.hono</hono.amqp-network.host>
    <hono.registration.host>hono-service-device-registry.hono</hono.registration.host>
    <hono.auth.host>hono-service-auth.hono</hono.auth.host>
    <default.java.options>
      -XX:MinRAMPercentage=80
      -XX:MaxRAMPercentage=90
      -DenableForcedCommandRerouting=true
    </default.java.options>
    <amqp.java.options></amqp.java.options>
    <coap.java.options></coap.java.options>
    <http.java.options></http.java.options>
    <mqtt.java.options></mqtt.java.options>
    <deviceregistry.image>hono-service-device-registry-file</deviceregistry.image>
    <!-- logging profile: either prod, dev or trace -->
    <logging.profile>prod</logging.profile>
    <trace.frames>0</trace.frames>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-client</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-service-base</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-service-base</artifactId>
      <version>${project.version}</version>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-proton</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.qpid</groupId>
      <artifactId>qpid-jms-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-demo-certs</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-mqtt</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-tcnative-boringssl-static</artifactId>
      <version>${netty.tcnative.version}</version>
    </dependency>

    <dependency>
      <groupId>org.eclipse.californium</groupId>
      <artifactId>californium-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.californium</groupId>
      <artifactId>scandium</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>${project.basedir}/src/test/resources</directory>
        <filtering>true</filtering>
        <targetPath>${project.build.directory}/resources</targetPath>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>run-tests</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <!--
                  Execution and configuration for copying certificates and config files
                  from related modules "target/config" folder so that we can include them in the image.
                 -->
                <id>copy_demo_certs</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <includeArtifactIds>hono-demo-certs</includeArtifactIds>
                  <outputDirectory>${project.build.directory}/certs</outputDirectory>
                  <includes>
                    *.pem,
                    *.p12,
                    *.jks
                  </includes>
                  <useSubDirectoryPerArtifact>false</useSubDirectoryPerArtifact>
                  <stripClassifier>true</stripClassifier>
                  <stripVersion>true</stripVersion>
                  <excludeTransitive>true</excludeTransitive>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <verbose>true</verbose>
              <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
              <startParallel>false</startParallel>
              <images>
                <!-- ##### Authentication service ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-service-auth-test</name>
                  <alias>auth</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.image.org-name}/hono-service-auth:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/auth</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>auth-server-*.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+auth.ip:auth.amqp.port:5672</port>
                      <port>+auth.ip:auth.health.port:${vertx.health.port}</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-service-auth.hono</alias>
                    </network>
                    <!-- 
                      Setting the swap property to the same value as the memory property effectively
                      prevents the container from swapping at all.
                      This way we can force the same behavior for running the integration
                      tests on both a local machine (which usually has swap space available) as
                      well as on Travis where there is no swap space available on the build job VMs.
                      We can thus detect OOM problems when running locally as opposed to only
                      later on Travis.
                     -->
                    <memorySwap>205520896</memorySwap>
                    <memory>205520896</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>authentication-impl,${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>AUTH</prefix>
                      <color>cyan</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${auth.ip}:${auth.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### Device Registration service ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-service-device-registry-test</name>
                  <alias>device-registry</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.image.org-name}/${deviceregistry.image}:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/deviceregistry</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>device-registry-*.pem</include>
                              <include>auth-server-cert.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+deviceregistry.ip:deviceregistry.amqp.port:5672</port>
                      <port>+deviceregistry.ip:deviceregistry.http.port:8080</port>
                      <port>+deviceregistry.ip:deviceregistry.health.port:${vertx.health.port}</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-service-device-registry.hono</alias>
                    </network>
                    <memorySwap>314572800</memorySwap>
                    <memory>314572800</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>REGISTRY</prefix>
                      <color>yellow</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${deviceregistry.ip}:${deviceregistry.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### ActiveMQ Artemis message broker ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-artemis-test:${project.version}</name>
                  <alias>artemis</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${artemis.image.name}</from>
                    <ports>
                      <port>5671</port>
                    </ports>
                    <entryPoint>
                      <shell>/opt/apache-artemis/bin/launch.sh start</shell>
                    </entryPoint>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/opt/apache-artemis/conf</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/artemis</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>artemisKeyStore.p12</include>
                              <include>trustStore.jks</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+broker.ip:broker.amqp.port:5671</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-artemis.hono</alias>
                    </network>
                    <memorySwap>419430400</memorySwap>
                    <memory>419430400</memory>
                    <env>
                      <AMQ_NAME>custom</AMQ_NAME>
                      <HOME>/var/run/artemis/</HOME>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>ARTEMIS</prefix>
                      <color>magenta</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(Server is now live)$</log>
                    </wait>
                  </run>
                </image>
                <!-- ##### Qpid Dispatch Router ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-dispatch-router-test:${project.version}</name>
                  <alias>qdrouter</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${dispatch-router.image.name}</from>
                    <ports>
                      <port>5671</port>
                      <port>5672</port>
                      <port>5673</port>
                    </ports>
                    <cmd>
                      <exec>
                        <arg>/sbin/qdrouterd</arg>
                        <arg>-c</arg>
                        <arg>/etc/hono/qdrouterd-with-broker.json</arg>
                      </exec>
                    </cmd>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/etc/hono</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/qpid</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>qdrouter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+qpid.ip:qpid.amqp.port:5672</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-dispatch-router.hono</alias>
                    </network>
                    <memorySwap>268435456</memorySwap>
                    <memory>268435456</memory>
                    <log>
                      <prefix>QPID</prefix>
                      <color>blue</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <log>.*(Listening on 0.0.0.0:5673)$</log>
                    </wait>
                    <env>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                  </run>
                </image>
                <!-- ##### HTTP adapter ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-adapter-http-test</name>
                  <alias>http-adapter</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.image.org-name}/hono-adapter-http-vertx:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <dependencySets>
                          <dependencySet>
                            <includes>
                              <include>io.netty:netty-tcnative-boringssl-static</include>
                            </includes>
                            <outputDirectory>opt/hono/extensions</outputDirectory>
                          </dependencySet>
                        </dependencySets>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/http</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>http-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+http.ip:http.port:8080</port>
                      <port>https.port:8443</port>
                      <port>+http.ip:http.health.port:${vertx.health.port}</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-http-vertx.hono</alias>
                    </network>
                    <memorySwap>314572800</memorySwap>
                    <memory>314572800</memory>
                    <env>
                      <LOGGING_CONFIG>file:/etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:/etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${http.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>HTTP</prefix>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${http.ip}:${http.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### MQTT adapter ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-adapter-mqtt-test</name>
                  <alias>mqtt-adapter</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.image.org-name}/hono-adapter-mqtt-vertx:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <dependencySets>
                          <dependencySet>
                            <includes>
                              <include>io.netty:netty-tcnative-boringssl-static</include>
                            </includes>
                            <outputDirectory>opt/hono/extensions</outputDirectory>
                          </dependencySet>
                        </dependencySets>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/mqtt</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>mqtt-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+mqtt.ip:mqtt.port:1883</port>
                      <port>mqtts.port:8883</port>
                      <port>+mqtt.ip:mqtt.health.port:${vertx.health.port}</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-mqtt-vertx.hono</alias>
                    </network>
                    <memorySwap>314572800</memorySwap>
                    <memory>314572800</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${mqtt.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>MQTT</prefix>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${mqtt.ip}:${mqtt.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### AMQP adapter ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-adapter-amqp-test</name>
                  <alias>amqp-adapter</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.image.org-name}/hono-adapter-amqp-vertx:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/amqp</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>amqp-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+adapter.amqp.ip:adapter.amqp.port:5672</port>
                      <port>+adapter.amqps.ip:adapter.amqps.port:5671</port>
                      <port>+adapter.amqp.ip:adapter.amqp.health.port:${vertx.health.port}</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-amqp-vertx.hono</alias>
                    </network>
                    <memorySwap>314572800</memorySwap>
                    <memory>314572800</memory>
                    <env>
                      <LOGGING_CONFIG>file:///etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:///etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${amqp.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>AMQP</prefix>
                      <color>RED</color>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${adapter.amqp.ip}:${adapter.amqp.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
                <!-- ##### CoAP adapter ##### -->
                <image>
                  <name>${docker.image.org-name}/hono-adapter-coap-test</name>
                  <alias>coap-adapter</alias>
                  <build>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <from>${docker.image.org-name}/hono-adapter-coap-vertx:${project.version}</from>
                    <assembly>
                      <mode>dir</mode>
                      <basedir>/</basedir>
                      <inline>
                        <id>config</id>
                        <fileSets>
                          <fileSet>
                            <directory>${project.build.directory}/resources/coap</directory>
                            <outputDirectory>etc/hono</outputDirectory>
                            <includes>
                              <include>*</include>
                            </includes>
                          </fileSet>
                          <fileSet>
                            <directory>${project.build.directory}/certs</directory>
                            <outputDirectory>etc/hono/certs</outputDirectory>
                            <includes>
                              <include>coap-adapter-*.pem</include>
                              <include>trusted-certs.pem</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                  <run>
                    <ports>
                      <port>+coap.ip:coap.port:5683/udp</port>
                      <port>coaps.port:5684/udp</port>
                      <port>+coap.ip:coap.health.port:${vertx.health.port}</port>
                    </ports>
                    <network>
                      <mode>custom</mode>
                      <name>hono</name>
                      <alias>hono-adapter-coap-vertx.hono</alias>
                    </network>
                    <memorySwap>268435456</memorySwap>
                    <memory>268435456</memory>
                    <env>
                      <LOGGING_CONFIG>file:/etc/hono/logback-spring.xml</LOGGING_CONFIG>
                      <SPRING_CONFIG_LOCATION>file:/etc/hono/</SPRING_CONFIG_LOCATION>
                      <SPRING_PROFILES_ACTIVE>${logging.profile}</SPRING_PROFILES_ACTIVE>
                      <JDK_JAVA_OPTIONS>${default.java.options} ${coap.java.options}</JDK_JAVA_OPTIONS>
                      <PN_TRACE_FRM>0</PN_TRACE_FRM>
                    </env>
                    <log>
                      <prefix>COAP</prefix>
                    </log>
                    <wait>
                      <time>${service.startup.timeout}</time>
                      <http>
                        <method>GET</method>
                        <url>http://${coap.ip}:${coap.health.port}/readiness</url>
                        <status>200..299</status>
                      </http>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>start-docker</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-and-remove-docker</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>remove</goal>
                </goals>
                <configuration>
                  <removeVolumes>true</removeVolumes>
                  <removeMode>all</removeMode>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <environmentVariables>
                <PN_TRACE_FRM>${trace.frames}</PN_TRACE_FRM>
              </environmentVariables>
              <systemProperties>
                <auth.host>${auth.ip}</auth.host>
                <auth.amqp.port>${auth.amqp.port}</auth.amqp.port>
                <hono.username>hono-client</hono.username>
                <hono.password>secret</hono.password>
                <tenant.admin.username>http-adapter@HONO</tenant.admin.username>
                <tenant.admin.password>http-secret</tenant.admin.password>
                <downstream.host>${qpid.ip}</downstream.host>
                <downstream.amqp.port>${qpid.amqp.port}</downstream.amqp.port>
                <downstream.username>consumer@HONO</downstream.username>
                <downstream.password>verysecret</downstream.password>
                <deviceregistry.host>${deviceregistry.ip}</deviceregistry.host>
                <deviceregistry.amqp.port>${deviceregistry.amqp.port}</deviceregistry.amqp.port>
                <deviceregistry.http.port>${deviceregistry.http.port}</deviceregistry.http.port>
                <deviceregistry.supportsGatewayMode>${deviceregistry.supportsGatewayMode}</deviceregistry.supportsGatewayMode>
                <coap.host>${coap.ip}</coap.host>
                <coap.port>${coap.port}</coap.port>
                <coaps.port>${coaps.port}</coaps.port>
                <http.host>${http.ip}</http.host>
                <http.port>${http.port}</http.port>
                <https.port>${https.port}</https.port>
                <mqtt.host>${mqtt.ip}</mqtt.host>
                <mqtt.port>${mqtt.port}</mqtt.port>
                <mqtts.port>${mqtts.port}</mqtts.port>
                <adapter.amqp.host>${adapter.amqp.ip}</adapter.amqp.host>
                <adapter.amqp.port>${adapter.amqp.port}</adapter.amqp.port>
                <adapter.amqps.port>${adapter.amqps.port}</adapter.amqps.port>
                <trust-store.path>${project.build.directory}/certs/trusted-certs.pem</trust-store.path>
                <test.env>${test.env}</test.env>
                <max.bcrypt.iterations>${max.bcrypt.iterations}</max.bcrypt.iterations>
                <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
                <!-- javax.net.debug>ssl:handshake</javax.net.debug-->
              </systemProperties>
              <failIfNoSpecifiedTests>false</failIfNoSpecifiedTests>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
