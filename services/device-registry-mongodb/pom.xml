<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2020 Contributors to the Eclipse Foundation
   
    See the NOTICE file(s) distributed with this work for additional
    information regarding copyright ownership.
   
    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License 2.0 which is available at
    http://www.eclipse.org/legal/epl-2.0
   
    SPDX-License-Identifier: EPL-2.0
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>org.eclipse.hono</groupId>
    <artifactId>hono-services</artifactId>
    <version>1.5.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>hono-service-device-registry-mongodb</artifactId>
  <name>Hono Mongodb Based Device Registry</name>
  <description>A Mongodb based device registry for Hono implementing the Device Registration and Credentials APIs.
    </description>
  <url>https://www.eclipse.org/hono</url>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-service-device-registry-base</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.hono</groupId>
      <artifactId>hono-service-device-registry-base</artifactId>
      <version>${project.version}</version>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-mongo-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-auth-mongo</artifactId>
    </dependency>
    <dependency>
      <groupId>de.flapdoodle.embed</groupId>
      <artifactId>de.flapdoodle.embed.mongo</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>com.github.joelittlejohn.embedmongo</groupId>
        <artifactId>embedmongo-maven-plugin</artifactId>
        <version>0.4.2</version>
        <executions>
          <execution>
            <id>start-mongodb</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <randomPort>true</randomPort>
              <!-- optional, default is false, if true allocates a random port and overrides embedmongo.port -->

              <version>${mongodb.version}</version>
              <!-- optional, default 2.2.1 -->

              <features>ONLY_WITH_SSL, ONLY_WINDOWS_2008_SERVER, NO_HTTP_INTERFACE_ARG</features>
              <!-- optional, default is none. Enables flapdoodle.embed.mongo features, for example to build Windows 
                download URLs since 3.6 -->

              <!-- databaseDirectory>/tmp/mongotest</databaseDirectory -->
              <!-- optional, default is a new dir in java.io.tmpdir -->

              <logging>none</logging>
              <!-- optional (file|console|none), default console -->

              <logFile>${project.build.directory}/myfile.log</logFile>
              <!-- optional, can be used when logging=file, default is ./embedmongo.log -->

              <logFileEncoding>utf-8</logFileEncoding>
              <!-- optional, can be used when logging=file, default is utf-8 -->

              <bindIp>127.0.0.1</bindIp>
              <!-- optional, default is to listen on all interfaces -->

              <!-- downloadPath>http://internal-mongo-repo/</downloadPath -->
              <!-- optional, default is http://fastdl.mongodb.org/ -->

              <unixSocketPrefix>${user.home}/.embedmongo</unixSocketPrefix>
              <!-- optional, default is /tmp -->

              <storageEngine>wiredTiger</storageEngine>
              <!--optional, one of wiredTiger or mmapv1 (default is mmapv1) -->

              <skip>false</skip>
              <!-- optional, skips this plugin entirely, use on the command line like -Dembedmongo.skip -->

            </configuration>
          </execution>
          <execution>
            <id>stop-mongodb</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <systemPropertyVariables>
            <mongodb.port>${embedmongo.port}</mongodb.port>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
            <!-- javax.net.debug>ssl:handshake</javax.net.debug -->
          </systemPropertyVariables>
        </configuration>
        <executions>
          <execution>
            <id>run-tests</id>
            <phase>integration-test</phase>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>build-docker-image</id>
      <activation>
        <property>
          <name>docker.host</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build_images</id>
                <!-- postpone building of container image to after the integration tests have succeeded because 
                  the unit tests are run against a Mongo DB instance that is started/stopped as part of the integration test phase -->
                <phase>post-integration-test</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <images>
                <image>
                  <build>
                    <labels>
                      <implemented.api.1>Tenant</implemented.api.1>
                      <implemented.api.2>Device Registration</implemented.api.2>
                      <implemented.api.3>Credentials</implemented.api.3>
                    </labels>
                    <ports>
                      <port>5671</port>
                      <port>5672</port>
                      <port>8080</port>
                      <port>8443</port>
                      <port>${vertx.health.port}</port>
                    </ports>
                    <env>
                      <JAVA_MAIN_CLASS>org.eclipse.hono.deviceregistry.mongodb.Application</JAVA_MAIN_CLASS>
                    </env>
                  </build>
                </image>
              </images>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jaeger</id>
      <dependencies>
        <dependency>
          <groupId>io.jaegertracing</groupId>
          <artifactId>jaeger-client</artifactId>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>docker-push-image</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-push-image</id>
                <phase>install</phase>
                <goals>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
