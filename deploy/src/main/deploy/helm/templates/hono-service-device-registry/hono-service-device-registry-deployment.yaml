{{- if .Values.deviceRegistryExample.enabled }}
#
# Copyright (c) 2019 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
{{- $args := dict "dot" . "component" "service-device-registry" "name" "service-device-registry" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  {{- include "hono.metadata" $args | nindent 2 }}
spec:
  serviceName: {{ printf "%s-headless" $args.name }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "hono.matchLabels" $args | nindent 6 }}
  template:
    metadata:
      {{- include "hono.metadata" $args | nindent 6 }}
    spec:
    {{- if .Values.deviceRegistryExample.data.resetOnStartup }}
      initContainers:
      # this container is used to copy example data from a secret to files
      # in a persistent volume
      - name: copy-example-data
        image: busybox
        command:
        - sh
        - -c
        - cp -u /tmp/hono/{{ .Values.deviceRegistryExample.data.devicesFile }} /var/lib/hono/device-registry/device-identities.json;
          cp -u /tmp/hono/{{ .Values.deviceRegistryExample.data.credentialsFile }} /var/lib/hono/device-registry/credentials.json;
          cp -u /tmp/hono/{{ .Values.deviceRegistryExample.data.tenantsFile }} /var/lib/hono/device-registry/tenants.json
        volumeMounts:
        - name: {{ default ( printf "%s-conf" $args.name ) .Values.deviceRegistryExample.data.volumeName | quote }}
          mountPath: "/tmp/hono"
        - name: "registry"
          mountPath: "/var/lib/hono/device-registry"
    {{- end }}
      containers:
      {{- include "hono.jaeger.agent" . | indent 6 }}
      - image: {{ .Values.deviceRegistryExample.imageName }}
        imagePullPolicy: IfNotPresent
        name: eclipse-hono-service-device-registry
        ports:
        - name: health
          containerPort: {{ .Values.healthCheckPort }}
          protocol: TCP
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP
        - name: amqps
          containerPort: 5671
          protocol: TCP
        - name: amqp
          containerPort: 5672
          protocol: TCP
        env:
        - name: SPRING_CONFIG_LOCATION
          value: file:///etc/hono/
        - name: SPRING_PROFILES_ACTIVE
          value: dev
        - name: LOGGING_CONFIG
          value: classpath:logback-spring.xml
        - name: _JAVA_OPTIONS
          value: "{{ .Values.defaultJavaOptions }}"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- include "hono.jaeger.clientConf" $args | indent 8 }}
        securityContext:
          privileged: false
        volumeMounts:
        {{- include "hono.container.secretVolumeMounts" ( dict "name" $args.name "conf" .Values.deviceRegistryExample ) | indent 8 }}
        - name: "registry"
          mountPath: "/var/lib/hono/device-registry"
        resources:
          limits:
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /liveness
            port: {{ .Values.healthCheckPort }}
            scheme: HTTPS
          initialDelaySeconds: 180
        readinessProbe:
          httpGet:
            path: /readiness
            port: {{ .Values.healthCheckPort }}
            scheme: HTTPS
          initialDelaySeconds: 10
      volumes:
      {{- include "hono.pod.secretVolumes" ( dict "releaseName" .Release.Name "name" $args.name "conf" .Values.deviceRegistryExample ) | indent 6 }}
      - name: "registry"
        persistentVolumeClaim:
          claimName: {{ printf "%s-%s" .Release.Name $args.name | quote }}
{{- end }}
