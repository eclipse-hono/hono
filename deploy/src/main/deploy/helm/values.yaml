# Default values for eclipse-hono.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

amqpMessagingNetworkExample:
  # enabled indicates whether the example AMQP Messaging Network
  # consisting of a single Dispatch Router and Broker should be
  # deployed and used. By default an internal Broker is deployed.
  # As alternative an external Broker can be configured as well.
  enabled: true
  # dispatchRouter.imageName contains the name (including tag)
  # of the container image to use for the example AQMP Messaging Network Router.
  dispatchRouter:
    imageName: ${dispatch-router.image.name}
    svc:
      annotations: {}
      loadBalancerIP:
  # AMQP Messaging Network Broker configuration.
  broker:
    type: artemis
    artemis:
    # imageName contains the name (including tag) of the container
    # image to use for the example AMQP Messaging Network Broker
      imageName: ${artemis.image.name}
   # Azure Service Bus as alternative to self-hosted Artemis ActiveMQ for event persistence
    servicebus:
      saslUsername:
      saslPassword:
      host:

dataGridExample:
  # enabled indicates whether the example data grid
  # should be deployed and used.
  # The default value of this property is false which is consistent with
  # the default value (false) of the "deviceConnectionService.enabled" property,
  # resulting in the in-memory implementation of the Device Connection
  # service provided by the example device registry being used by default.
  enabled: false
  # imageName contains the name (including tag)
  # of the container image to use for the example data grid.
  imageName: ${infinispan.image.name}


jaegerBackendExample:

  # enabled indicates whether the example Jaeger all-in-one
  # back end should be deployed and used.
  enabled: false
  # allInOneImage contains the name (including tag)
  # of the container image to use for the example Jaeger back end.
  allInOneImage: ${jaeger-all-in-one.image.name}
  svc:
    annotations: {}
    loadBalancerIP:

# jaegerAgentImage contains the name (including tag)
# of the container image to use for the Jaeger Agent sidecar deployed
# with Hono's components.
jaegerAgentImage: ${jaeger-agent.image.name}
# jaegerAgentConf contains environment variables for configuring the Jaeger Agent sidecar container
# that is deployed with each of Hono's components.
# The Jaeger Agent sidecar container is deployed with standard properties if
# "jaegerBackendExample.enabled" is set to true.
# Otherwise the sidecar container is deployed using the environment variables contained
# in this property (if not nil).
# Please refer to https://www.jaegertracing.io/docs/1.13/cli/ for syntax and semantics
# of environment variables.
jaegerAgentConf:
#  REPORTER_TYPE: tchannel
#  REPORTER_TCHANNEL_HOST_PORT: my-jaeger-collector:14267
#  REPORTER_TCHANNEL_DISCOVERY_MIN_PEERS: 1

# defaultJavaOptions contains options to pass to the JVM when starting
# up Hono's containers
defaultJavaOptions: ${default-java-options}

# the port that the Hono components' Prometheus scraping endpoint is exposed on
monitoring:
  prometheus:
    port: ${prometheus.scraping.port}

# healthCheckPort is the port that the Hono components bind their health check
# server to.
healthCheckPort: ${vertx.health.port}

# platform indicates the type of container orchestration platform we are deploying to.
# Supported values are:
# - openshift
# - kubernetes
#
# When setting to "openshift", Route resources will also be deployed.
platform: kubernetes

# useLoadBalancer indicates whether services should be deployed using the
# "LoadBalancer" type (true) or the "NodePort" type (false).
# This property will be ignored when deploying to platform "openshift".
useLoadBalancer: true

# Configuration properties for protocol adapters.
adapters:

  # amqpMessagingNetworkSpec contains Hono client properties used by all protocol
  # adapters for connecting to the AMQP Messaging Network to forward downstream messages to.
  # This property MUST be set if "amqpMessagingNetworkDeployExample" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  #amqpMessagingNetworkSpec:
  #  host: my-amqp-host
  #  port: 5671
  #  trustStorePath: /etc/conf/amqp-trust-store.pem
  #  credentialsPath: /etc/conf/amqp-credentials.properties

  # commandAndControlSpec contains Hono client properties used by all protocol
  # adapters for connecting to the AMQP Messaging Network which is used by applications
  # to send commands to devices.
  # This property MUST be set if "amqpMessagingNetworkDeployExample" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  #commandAndControlSpec:

  # tenantSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Tenant service.
  # This property MUST be set if "deviceRegistryExample.enabled" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  #tenantSpec:

  # deviceRegistrationSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Device Registration service.
  # This property MUST be set if "deviceRegistryExample.enabled" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  #deviceRegistrationSpec:

  # credentialsSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Credentials service.
  # This property MUST be set if "deviceRegistryExample.enabled" is set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  #credentialsSpec:

  # deviceConnectionSpec contains Hono client properties used by all protocol adapters for
  # connecting to the Device Connection service.
  # This property MUST be set if "deviceRegistryExample.enabled" and
  # "deviceConnectionService.enabled" are both set to false.
  # Please refer to https://www.eclipse.org/hono/docs/admin-guide/hono-client-configuration/
  # for a description of supported properties.
  #deviceConnectionSpec:

  # tenantIdleTimeout contains the amount of time of inactivity after
  # which protocol adapters close tenant specific links to services they
  # interact with.
  # Please refer to the Spring Boot documentation for the supported syntax:
  # https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config-conversion-duration
  defaultTenantIdleTimeout: "1h"

  amqp:
    # imageName contains the name (including registry and tag)
    # of the container image to use for the AMQP adapter
    imageName: ${docker.repository}/hono-adapter-amqp-vertx:${project.version}

    svc:
      annotations: {}
      loadBalancerIP:

    # extraSecretMounts describes additional secrets that should be mounted into the
    # adapter's container filesystem. The files from the secret(s) can
    # then be used in e.g. the service client specs.
    # The secrets are expected to exist in the same Kubernetes namespace
    # as the one that the adapter has been deployed to.
    # If this property is set then the example key, cert, trust store and credentials
    # will not be included in the adapters "config" secret, i.e. the extra
    # secret(s) defiend here need to include these artifacts if the adapter should
    # use TLS and/or credentials for authentication.
    #extraSecretMounts:
    #  passwords:
    #    secretName: "my-passwords"
    #    mountPath: "/etc/pwd"
    #  other:
    #    secretName: "other-stuff"
    #    mountPath: "/etc/other"

    # hono contains the adapter's configuration properties as defined in
    # https://www.eclipse.org/hono/docs/admin-guide/amqp-adapter-config/
    hono:
      app:
        # maxInstances defines the number of adapter Verticle instances to deploy
        # to the vert.x runtime during start-up.
        maxInstances: 1

      # amqp contains configuration properties for the adapter's
      # exposed AMQP endpoints.
      # If not set, the adapter by default exposes the secure and insecure ports
      # using an example key and certificate.
      amqp:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

      # healthCheck contains configuration properties for the adapter's
      # health check server as defined by
      # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
      # If not set, a TLS secured health check server is configured listening on
      # all network interfaces on port ${vertx.health.port} using the adapter's
      # example key and cert.'
      healthCheck:
      #  bindAddress: 0.0.0.0
      #  port: 12000
      #  keyPath: "/etc/config/key.pem"
      #  certPath: "/etc/config/cert.pem"

  coap:
    # enabled indicates if Hono's (experimental) CoAP adapter should be deployed.
    # Note that this requires building the corresponding container image manually because
    # there is no official image available from Docker Hub (yet).
    enabled: false
    # imageName contains the name (including registry and tag)
    # of the container image to use for the CoAP adapter
    imageName: ${docker.repository}/hono-adapter-coap-vertx:${project.version}

    svc:
      annotations: {}
      loadBalancerIP:

    # extraSecretMounts describes additional secrets that should be mounted into the
    # adapter's container filesystem. The files from the secret(s) can
    # then be used in e.g. the service client specs.
    # The secrets are expected to exist in the same Kubernetes namespace
    # as the one that the adapter has been deployed to.
    # If this property is set then the example key, cert, trust store and credentials
    # will not be included in the adapters "config" secret, i.e. the extra
    # secret(s) defiend here need to include these artifacts if the adapter should
    # use TLS and/or credentials for authentication.
    #extraSecretMounts:
    #  passwords:
    #    secretName: "my-passwords"
    #    mountPath: "/etc/pwd"
    #  other:
    #    secretName: "other-stuff"
    #    mountPath: "/etc/other"

    # hono contains the adapter's configuration properties
    hono:
      app:
        # maxInstances defines the number of adapter Verticle instances to deploy
        # to the vert.x runtime during start-up.
        maxInstances: 1

      # healthCheck contains configuration properties for the adapter's
      # health check server as defined by
      # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
      # If not set, a TLS secured health check server is configured listening on
      # all network interfaces on port ${vertx.health.port} using the adapter's
      # example key and cert.'
      healthCheck:
      #  bindAddress: 0.0.0.0
      #  port: 12000
      #  keyPath: "/etc/config/key.pem"
      #  certPath: "/etc/config/cert.pem"

  http:
    # imageName contains the name (including registry and tag)
    # of the container image to use for the HTTP adapter
    imageName: ${docker.repository}/hono-adapter-http-vertx:${project.version}

    svc:
      annotations: {}
      loadBalancerIP:

    # extraSecretMounts describes additional secrets that should be mounted into the
    # adapter's container filesystem. The files from the secret(s) can
    # then be used in e.g. the service client specs.
    # The secrets are expected to exist in the same Kubernetes namespace
    # as the one that the adapter has been deployed to.
    # If this property is set then the example key, cert, trust store and credentials
    # will not be included in the adapters "config" secret, i.e. the extra
    # secret(s) defiend here need to include these artifacts if the adapter should
    # use TLS and/or credentials for authentication.
    #extraSecretMounts:
    #  passwords:
    #    secretName: "my-passwords"
    #    mountPath: "/etc/pwd"
    #  other:
    #    secretName: "other-stuff"
    #    mountPath: "/etc/other"

    # hono contains the adapter's configuration properties as defined in
    # https://www.eclipse.org/hono/docs/admin-guide/http-adapter-config/
    hono:
      app:
        # maxInstances defines the number of adapter Verticle instances to deploy
        # to the vert.x runtime during start-up.
        maxInstances: 1

      # http contains configuration properties for the adapter's
      # exposed HTTP endpoints.
      # If not set, the adapter by default exposes the secure and insecure ports
      # using an example key and certificate.
      http:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

      # healthCheck contains configuration properties for the adapter's
      # health check server as defined by
      # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
      # If not set, a TLS secured health check server is configured listening on
      # all network interfaces on port ${vertx.health.port} using the adapter's
      # example key and cert.'
      healthCheck:
      #  bindAddress: 0.0.0.0
      #  port: 12000
      #  keyPath: "/etc/config/key.pem"
      #  certPath: "/etc/config/cert.pem"

  lora:
    # enabled indicates if Hono's Lora adapter should be deployed.
    enabled: false
    # imageName contains the name (including registry and tag)
    # of the container image to use for the LoRa adapter
    imageName: ${docker.repository}/hono-adapter-lora-vertx:${project.version}

    svc:
      annotations: {}
      loadBalancerIP:

    # extraSecretMounts describes additional secrets that should be mounted into the
    # adapter's container filesystem. The files from the secret(s) can
    # then be used in e.g. the service client specs.
    # The secrets are expected to exist in the same Kubernetes namespace
    # as the one that the adapter has been deployed to.
    # If this property is set then the example key, cert, trust store and credentials
    # will not be included in the adapters "config" secret, i.e. the extra
    # secret(s) defiend here need to include these artifacts if the adapter should
    # use TLS and/or credentials for authentication.
    #extraSecretMounts:
    #  passwords:
    #    secretName: "my-passwords"
    #    mountPath: "/etc/pwd"
    #  other:
    #    secretName: "other-stuff"
    #    mountPath: "/etc/other"

    # hono contains the adapter's configuration properties
    hono:
      app:
        # maxInstances defines the number of adapter Verticle instances to deploy
        # to the vert.x runtime during start-up.
        maxInstances: 1

      # lora contains configuration properties for the adapter's
      # exposed HTTP endpoints.
      # If not set, the adapter by default exposes the secure and insecure ports
      # using an example key and certificate.
      lora:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

      # healthCheck contains configuration properties for the adapter's
      # health check server as defined by
      # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
      # If not set, a TLS secured health check server is configured listening on
      # all network interfaces on port ${vertx.health.port} using the adapter's
      # example key and cert.'
      healthCheck:
      #  bindAddress: 0.0.0.0
      #  port: 12000
      #  keyPath: "/etc/config/key.pem"
      #  certPath: "/etc/config/cert.pem"

  mqtt:
    # imageName contains the name (including registry and tag)
    # of the container image to use for the MQTT adapter
    imageName: ${docker.repository}/hono-adapter-mqtt-vertx:${project.version}

    svc:
      annotations: {}
      loadBalancerIP:

    # extraSecretMounts describes additional secrets that should be mounted into the
    # adapter's container filesystem. The files from the secret(s) can
    # then be used in e.g. the service client specs.
    # The secrets are expected to exist in the same Kubernetes namespace
    # as the one that the adapter has been deployed to.
    # If this property is set then the example key, cert, trust store and credentials
    # will not be included in the adapters "config" secret, i.e. the extra
    # secret(s) defiend here need to include these artifacts if the adapter should
    # use TLS and/or credentials for authentication.
    #extraSecretMounts:
    #  passwords:
    #    secretName: "my-passwords"
    #    mountPath: "/etc/pwd"
    #  other:
    #    secretName: "other-stuff"
    #    mountPath: "/etc/other"

    # hono contains the adapter's configuration properties as defined in
    # https://www.eclipse.org/hono/docs/admin-guide/mqtt-adapter-config/
    hono:
      app:
        # maxInstances defines the number of adapter Verticle instances to deploy
        # to the vert.x runtime during start-up.
        maxInstances: 1

      # http contains configuration properties for the adapter's
      # exposed MQTT endpoints.
      # If not set, the adapter by default exposes the secure and insecure ports
      # using an example key and certificate.
      mqtt:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

      # healthCheck contains configuration properties for the adapter's
      # health check server as defined by
      # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
      # If not set, a TLS secured health check server is configured listening on
      # all network interfaces on port ${vertx.health.port} using the adapter's
      # example key and cert.'
      healthCheck:
      #  bindAddress: 0.0.0.0
      #  port: 12000
      #  keyPath: "/etc/config/key.pem"
      #  certPath: "/etc/config/cert.pem"

  kura:
    # enabled indicates if Hono's (deprecated) Kura adapter should be deployed.
    enabled: false
    # imageName contains the name (including registry and tag)
    # of the container image to use for the Kura adapter
    imageName: ${docker.repository}/hono-adapter-kura:${project.version}
    svc:
      annotations: {}
      loadBalancerIP:

    # extraSecretMounts describes additional secrets that should be mounted into the
    # adapter's container filesystem. The files from the secret(s) can
    # then be used in e.g. the service client specs.
    # The secrets are expected to exist in the same Kubernetes namespace
    # as the one that the adapter has been deployed to.
    # If this property is set then the example key, cert, trust store and credentials
    # will not be included in the adapters "config" secret, i.e. the extra
    # secret(s) defiend here need to include these artifacts if the adapter should
    # use TLS and/or credentials for authentication.
    #extraSecretMounts:
    #  passwords:
    #    secretName: "my-passwords"
    #    mountPath: "/etc/pwd"
    #  other:
    #    secretName: "other-stuff"
    #    mountPath: "/etc/other"

    # hono contains the adapter's configuration properties as defined in
    # https://www.eclipse.org/hono/docs/admin-guide/kura-adapter-config/
    hono:
      app:
        # maxInstances defines the number of adapter Verticle instances to deploy
        # to the vert.x runtime during start-up.
        maxInstances: 1

      # http contains configuration properties for the adapter's
      # exposed MQTT endpoints.
      # If not set, the adapter by default exposes the secure and insecure ports
      # using an example key and certificate.
      kura:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

      # healthCheck contains configuration properties for the adapter's
      # health check server as defined by
      # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
      # If not set, a TLS secured health check server is configured listening on
      # all network interfaces on port ${vertx.health.port} using the adapter's
      # example key and cert.'
      healthCheck:
      #  bindAddress: 0.0.0.0
      #  port: 12000
      #  keyPath: "/etc/config/key.pem"
      #  certPath: "/etc/config/cert.pem"


# authServer contains configuration properties for the Auth Server component.
authServer:

  # imageName contains the name (including registry and tag)
  # of the container image to use for the Auth Server
  imageName: ${docker.repository}/hono-service-auth:${project.version}

  # extraSecretMounts describes additional secrets that should be mounted into the
  # Auth Server's' container filesystem. The files from the secret(s) can
  # then be used in e.g. the configuration of the server's exposed ports.
  # The secrets are expected to exist in the same Kubernetes namespace
  # as the one that the server has been deployed to.
  # If this property is set then the example key, cert, trust store and credentials
  # will not be included in the Auth Server's' "config" secret, i.e. the extra
  # secret(s) defined here need to include these artifacts if the Auth Server should
  # use TLS and/or credentials for authentication.
  #extraSecretMounts:
  #  passwords:
  #    secretName: "my-passwords"
  #    mountPath: "/etc/pwd"
  #  other:
  #    secretName: "other-stuff"
  #    mountPath: "/etc/other"

  # hono contains the Auth Server's configuration properties as defined in
  # https://www.eclipse.org/hono/docs/admin-guide/auth-server-config/
  hono:
    app:
      # maxInstances defines the number of adapter Verticle instances to deploy
      # to the vert.x runtime during start-up.
      maxInstances: 1
    auth:
      # svc contains configuration properties for the server
      # If not set, the sever by default loads permissions from
      # /etc/hono/permissions.json and issues tokens with a lifetime of 1h
      svc:
      #  permissionsPath: "file:///etc/hono/permissions.json"
      #  signing:
          # tokenExpiration contains the number of seconds after which tokens issued
          # by the Auth server will expire.
          #tokenExpiration: 3600
      # amqp contains configuration properties for the server's
      # exposed AMQP endpoints.
      # If not set, the sever by default exposes the secure and insecure ports
      # using an example key and certificate.
      amqp:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

    # healthCheck contains configuration properties for the service's
    # health check server as defined by
    # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
    # If not set, a TLS secured health check server is configured listening on
    # all network interfaces on port ${vertx.health.port} using the service's
    # example key and cert.'
    healthCheck:
    #  bindAddress: 0.0.0.0
    #  port: 12000
    #  keyPath: "/etc/config/key.pem"
    #  certPath: "/etc/config/cert.pem"


# deviceRegistryExample contains configuration properties for the
# example Device Registry.
deviceRegistryExample:

  # enabled indicates whether the example Device Registry
  # should be deployed and used.
  # If this property is set to false, then the protocol adapters need to be
  # explicitly configured for connecting to the Tenant, Device Registration,
  # Credentials and Device Connection services using properties
  # - "adapters.tenantSpec"
  # - "adapters.deviceRegistrationSpec"
  # - "adapters.credentialsSpec"
  # - "adapters.deviceConnectionSpec"
  enabled: true

  # imageName contains the name (including registry and tag)
  # of the container image to use for the example Device Registry
  imageName: ${docker.repository}/hono-service-device-registry:${project.version}

  svc:
    annotations: {}
    loadBalancerIP:

  # extraSecretMounts describes additional secrets that should be mounted into the
  # Device Registry's' container filesystem. The files from the secret(s) can
  # then be used in e.g. the configuration of the server's exposed ports.
  # The secrets are expected to exist in the same Kubernetes namespace
  # as the one that the server has been deployed to.
  # If this property is set then the example key, cert, trust store and example
  # data files will not be included in the Registry's "config" secret, i.e. the extra
  # secret(s) defined here need to include these artifacts if the Device Registry should
  # use TLS and/or other example data.
  #extraSecretMounts:
  #  tls:
  #    secretName: "key-material"
  #    mountPath: "/etc/tls"
  #  data:
  #    secretName: "example-data"
  #    mountPath: "/etc/data"

  # data defines the location of files containing data
  # that should be used to initialize the example Device Registry during startup.
  # The files are ource from where 
  data:
    # volumeName contains the name of the service pod's volume that has been created for the
    # secret containing the example data files.
    # If not set, the files will be read from the volume created from the registry's default "conf" secret.
    # Otherwise, the volume name needs to match the name used in the extraSecretMounts for the
    # secret containing the data.
    #volumeName:
    # tenantsFile inidicates the name of the file that is used to initialize the
    # Tenant service with example tenant data
    tenantsFile: example-tenants.json
    # devicesFile inidicates the name of the file that is used to initialize the
    # Device Registration service with example device data
    devicesFile: example-device-identities.json
    # credentialsFile inidicates the name of the file that is used to initialize the
    # Credentials service with example credentials
    credentialsFile: example-credentials.json
    # resetOnStartup indicates whether registration data should be reset to initial
    # example data when the example Device Registry starts up
    resetOnStartup: true

  # Persistent volume claim storage class
  #storageClass:

  # hono contains the Device Registry's configuration properties as defined in
  # https://www.eclipse.org/hono/docs/admin-guide/device-registry-config/
  hono:
    # auth contains Hono client properties used by the example registry for
    # connecting to the Authentication service.
    # If not set, the registry by default uses the Auth Server component to
    # authenticate clients.
    auth:
    registry:
      # amqp contains configuration properties for the server's
      # exposed AMQP endpoints.
      # If not set, the registry by default exposes the secure port
      # using an example key and certificate.
      amqp:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

      # rest contains configuration properties for the server's
      # exposed HTTP endpoints.
      # If not set, the registry by default exposes the insecure and secure ports
      # using an example key and certificate.
      rest:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

    # healthCheck contains configuration properties for the service's
    # health check server as defined by
    # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
    # If not set, a TLS secured health check server is configured listening on
    # all network interfaces on port ${vertx.health.port} using the service's
    # example key and cert.'
    healthCheck:
    #  bindAddress: 0.0.0.0
    #  port: 12000
    #  keyPath: "/etc/config/key.pem"
    #  certPath: "/etc/config/cert.pem"

# deviceConnectionService contains configuration properties for the
# Device Connection service.
deviceConnectionService:

  # imageName contains the name (including registry and tag)
  # of the container image to use for the Device Connection service
  imageName: ${docker.repository}/hono-service-device-connection:${project.version}
  svc:
    annotations: {}

  # enabled indicates if the data grid based Device Connection service implementation
  # should be deployed and used.
  # If set to false (the default) and "deviceRegistryExample.enabled" is set to true,
  # the in-memory implementation that is part of the example Device Registry is used.
  # If set to false (the default) and "deviceRegistryExample.enabled" is also set to false,
  # then the "adapters.deviceConnectionSpec" is expected to contain the required
  # Hono client config properties to connect to an already existing Device Connection service.
  enabled: false

  # extraSecretMounts describes additional secrets that should be mounted into the
  # service's' container filesystem. The files from the secret(s) can
  # then be used in e.g. the configuration of the service's exposed ports.
  # The secrets are expected to exist in the same Kubernetes namespace
  # as the one that the service has been deployed to.
  # If this property is set then the example key, cert and trust store will not be
  # included in the service's "config" secret, i.e. the extra
  # secret(s) defined here need to include these artifacts if the service should
  # use TLS and/or other credentials.
  #extraSecretMounts:
  #  tls:
  #    secretName: "key-material"
  #    mountPath: "/etc/tls"

  # hono contains the service's configuration properties as defined in
  # https://www.eclipse.org/hono/docs/admin-guide/device-connection-config/
  hono:
    app:
      # maxInstances defines the number of adapter Verticle instances to deploy
      # to the vert.x runtime during start-up.
      maxInstances: 1
      startupTimeout: 180
    # auth contains Hono client properties used by the service for
    # connecting to the Authentication service.
    # If not set, the service by default uses the Auth Server component to
    # authenticate clients.
    auth:
    deviceConnection:
      # amqp contains configuration properties for the server's
      # exposed AMQP endpoints.
      # If not set, the registry by default exposes the secure port
      # using an example key and certificate.
      amqp:
      #  insecurePortEnabled: true
      #  insecurePortBindAddress: "0.0.0.0"

      # remote contains properties for configuring the Infinispan Hotrod connection
      # to the data grid that should be used for storing the device connection data.
      # This property MUST be set if "deviceConnectionService.enabled" is set to true
      # and "dataGridExample.enabled" is set to false (the default).
      # Please refer to https://docs.jboss.org/infinispan/9.4/apidocs/org/infinispan/client/hotrod/configuration/package-summary.html#package.description
      # for a list of configuration properties.
      remote:
      #  serverList: hono-data-grid:11222
      #  authServerName: hono-data-grid
      #  authUsername: hono
      #  authPassword: hono-secret

    # healthCheck contains configuration properties for the service's
    # health check server as defined by
    # https://www.eclipse.org/hono/docs/admin-guide/monitoring-tracing-config/#health-check-server-configuration
    # If not set, a TLS secured health check server is configured listening on
    # all network interfaces on port ${vertx.health.port} using the service's
    # example key and cert.'
    healthCheck:
    #  bindAddress: 0.0.0.0
    #  port: 12000
    #  keyPath: "/etc/config/key.pem"
    #  certPath: "/etc/config/cert.pem"

prometheus:
  # createInstance indicates whether a Prometheus server should be created
  # using the Prometheus chart.
  # Set this property to false if you want to use an already existing server
  # instead. In that case, set the "name" and "port" properties to the
  # existing server's host name and port.
  createInstance: true
  # host contains the host name of an existing Prometheus server.
  # This property is used to configure a corresponding datasource in Grafana
  # if createInstance is set to false.
  #host:
  # post contains the port number of an existing Prometheus server.
  # This property is used to configure a corresponding datasource in Grafana
  # if createInstance is set to false.
  #port: 9090

  ## Define serviceAccount names for components. Defaults to component's fully qualified name.
  ##
  serviceAccounts:
    alertmanager:
      create: false
      name:
    kubeStateMetrics:
      create: false
      name:
    nodeExporter:
      create: false
      name:
    pushgateway:
      create: false
      name:
    server:
      create: true
      name:

  server:
    configMapOverrideName: prometheus-config
    global:
      scrape_interval: 10s
    service:
      servicePort: 9090

  alertmanager:
    enabled: false

  kubeStateMetrics:
    enabled: false

  nodeExporter:
    enabled: false

  pushgateway:
    enabled: false

grafana:
  enabled: true
  adminPassword: admin

  # labels to be added to the Grafana Deployment
  labels:
    app.kubernetes.io/name: eclipse-hono
    app.kubernetes.io/component: dashboard

  # labels to be added to the Grafana Pod(s)
  podLabels:
    app.kubernetes.io/name: eclipse-hono
    app.kubernetes.io/component: dashboard

  
  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
    labels:
      app.kubernetes.io/name: eclipse-hono
      app.kubernetes.io/component: dashboard

  ## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
  ## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
  sidecar:
    dashboards:
      enabled: true
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard
    datasources:
      enabled: true
      # label that the configmaps with datasources are marked with
      label: grafana_datasource

  rbac:
    namespaced: true

