# Default values for eclipse-hono.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# amqpMessagingNetworkDeployExample indicates whether the example AMQP Messaging Network
# consisting of a single Dispatch Router and Artemis broker should be
# deployed and used.
amqpMessagingNetworkDeployExample: true
# dispatchRouterImageName contains the name (including tag)
# of the container image to use for the example AQMP Messaging Network
dispatchRouterImageName: ${dispatch-router.image.name}
# artemisImageName contains the name (including tag) of the container
# image to use for the example AMQP Messaging network
artemisImageName: ${artemis.image.name}


# deviceRegistryDeployExample indicates whether the example Device Registry
# should be deployed and used.
deviceRegistryDeployExample: true


# dataGridDeployExample indicates whether the example data grid
# should be deployed and used.
dataGridDeployExample: false
# dataGridServerImage contains the name (including tag)
# of the container image to use for the example data grid.
dataGridServerImage: ${infinispan.image.name}
# dataGridConfigFile contains the path to an XML file that should be used for configuring
# the Infinispan Servers forming the example data grid.
# The file's content needs to follow the syntax and semantics defined by
# https://infinispan.org/docs/stable/server_guide/server_guide.html#server_config
# If no path is set, a default configuration is used
# (see templates/example-data-grid/configmap.yaml).
#dataGridConfigFile:


# jaegerBackendDeployExample indicates whether the example Jaeger all-in-one
# back end should be deployed and used.
jaegerBackendDeployExample: false
# jaegerBackendAllInOneImage contains the name (including tag)
# of the container image to use for the example Jaeger back end.
jaegerBackendAllInOneImage: ${jaeger-all-in-one.image.name}

# jaegerAgentImage contains the name (including tag)
# of the container image to use for the Jaeger Agent sidecar deployed
# with Hono's components.
jaegerAgentImage: ${jaeger-agent.image.name}
# jaegerAgentConf contains environment variables for configuring the Jaeger Agent sidecar container
# that is deployed with each of Hono's components.
# The Jaeger Agent sidecar container is deployed with standard properties if
# "jaegerBackendDeployExample" is set to true.
# Otherwise the sidecar container is deployed using the environment variables contained
# in this property (if not nil).
# Please refer to https://www.jaegertracing.io/docs/1.13/cli/ for syntax and semantics
# of environment variables.
jaegerAgentConf:
#  REPORTER_TYPE: tchannel
#  REPORTER_TCHANNEL_HOST_PORT: my-jaeger-collector:14267
#  REPORTER_TCHANNEL_DISCOVERY_MIN_PEERS: 1


# honoContainerRegistry contains the host name of the container registry
# to pull Hono images from.
# This can be set to e.g. a private container registry where
# snapshot images have been pushed to.
# By default we pull from Docker Hub.
honoContainerRegistry: index.docker.io

# honoImageTag contains the image tag to use when pulling Hono container images.
# The default value is the chart's app version. It may be overridden in
# order to pull custom built images from a (private) container registry.
honoImageTag: ${project.version}

# defaultJavaOptions contains options to pass to the JVM when starting
# up Hono's containers
defaultJavaOptions: ${default-java-options}

# the port that the Hono components' Prometheus scraping endpoint is exposed on
monitoring:
  prometheus:
    port: ${prometheus.scraping.port}

# healthCheckPort is the port that the Hono components bind their health check
# server to.
healthCheckPort: ${vertx.health.port}

# platform indicates the type of container orchestration platform we are deploying to.
# Supported values are:
# - openshift
# - kubernetes
#
# When setting to "openshift", Route resources will also be deployed.
platform: kubernetes

# useLoadBalancer indicates whether services should be deployed using the
# "LoadBalancer" type (true) or the "NodePort" type (false).
# This property will be ignored when deploying to platform "openshift".
useLoadBalancer: true

authServer:
  signing:
    # tokenExpiration contains the number of seconds after which tokens issued
    # by the Auth server will expire.
    tokenExpiration: 3600

# Configuration options for adapters.
adapters:

  #amqpMessagingNetworkSpec:
  #commandAndControlSpec:
  #credentialsSpec:
  #deviceConnectionSpec:
  #deviceRegistrationSpec:
  #tenantSpec:

  coap:
    # enabled indicates if Hono's (experimental) CoAP adapter should be deployed.
    # Note that this requires building the corresponding container image manually because
    # there is no official image available from Docker Hub (yet).
    enabled: false
  kura:
    # enabled indicates if Hono's (deprecated) Kura adapter should be deployed.
    enabled: false
  # Configures a timeout for inactive sender links.
  # Please refer to the Spring Boot documentation for the supported syntax:
  # https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-conversion-duration
  inactiveLinkTimeout: 1h

deviceConnectionService:

  # enabled indicates if the data grid based Device Connection service implementation
  # should be deployed and used. If set to false (the default), the example implementation
  # that is part of the example Device Registry is used instead, if "deviceRegistryDeployExample"
  # is set to true.
  enabled: false

  # remoteSpec contains properties for configuring the Infinispan Hotrod connection
  # to the data grid that should be used for storing the device connection data.
  # This property MUST be set if "enabled" is set to true and "dataGridDeployExample"
  # is set to false (the default).
  # Please refer to https://docs.jboss.org/infinispan/9.4/apidocs/org/infinispan/client/hotrod/configuration/package-summary.html#package.description
  # for a list of configuration properties.
  #remoteSpec:
  #  serverList: hono-data-grid:11222
  #  authServerName: hono-data-grid
  #  authUsername: hono
  #  authPassword: hono-secret

prometheus:
  # createInstance indicates whether a Prometheus server should be created
  # using the Prometheus chart.
  # Set this property to false if you want to use an already existing server
  # instead. In that case, set the "name" and "port" properties to the
  # existing server's host name and port.
  createInstance: true
  # host contains the host name of an existing Prometheus server.
  # This property is used to configure a corresponding datasource in Grafana
  # if createInstance is set to false.
  #host:
  # post contains the port number of an existing Prometheus server.
  # This property is used to configure a corresponding datasource in Grafana
  # if createInstance is set to false.
  #port: 9090

  ## Define serviceAccount names for components. Defaults to component's fully qualified name.
  ##
  serviceAccounts:
    alertmanager:
      create: false
      name:
    kubeStateMetrics:
      create: false
      name:
    nodeExporter:
      create: false
      name:
    pushgateway:
      create: false
      name:
    server:
      create: true
      name:

  server:
    configMapOverrideName: prometheus-config
    global:
      scrape_interval: 10s
    service:
      servicePort: 9090

  alertmanager:
    enabled: false

  kubeStateMetrics:
    enabled: false

  nodeExporter:
    enabled: false

  pushgateway:
    enabled: false

grafana:
  enabled: true
  adminPassword: admin
  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
    labels:
      app.kubernetes.io/name: eclipse-hono
      app.kubernetes.io/component: dashboard

  ## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
  ## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
  sidecar:
    dashboards:
      enabled: true
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard
    datasources:
      enabled: true
      # label that the configmaps with datasources are marked with
      label: grafana_datasource

  rbac:
    namespaced: true

